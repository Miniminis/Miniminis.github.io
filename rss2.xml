<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>흑염소의 개발블로그</title>
    <link>https://miniminis.github.io/</link>
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description></description>
    <pubDate>Wed, 13 May 2020 21:27:11 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>이것이 리눅스다(2020) 02 / Vmware 특징, 리눅스 개요</title>
      <link>https://miniminis.github.io/2020/05/14/linux-thisislinux02/</link>
      <guid>https://miniminis.github.io/2020/05/14/linux-thisislinux02/</guid>
      <pubDate>Wed, 13 May 2020 21:27:11 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;‘이것이 리눅스다 2020년 개정판’을 공부하고 있다. 나와 같이 블로그나 글을 통해 공부하는 것이 더 편한 사람들을 위해 공부의 과정을 간단하게나마 글로 남기고자 한다. 책은 &lt;a href=&quot;https://www.hanbit.co.kr/stor
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p>‘이것이 리눅스다 2020년 개정판’을 공부하고 있다. 나와 같이 블로그나 글을 통해 공부하는 것이 더 편한 사람들을 위해 공부의 과정을 간단하게나마 글로 남기고자 한다. 책은 <a href="https://www.hanbit.co.kr/store/books/look.php?p_code=B8529915277" target="_blank" rel="noopener">[링크]</a>를 통해 구입할 수 있고, 강의는 <a href="https://www.youtube.com/playlist?list=PLVsNizTWUw7EJ9z-LW3lv3VC-6HI9I3hN" target="_blank" rel="noopener">[링크]</a>에서 확인할 수 있다. 한빛에서 네이버 카페<a href="https://cafe.naver.com/thisislinux" target="_blank" rel="noopener">[링크]</a>도 운영하고 있어서 정말 편하게 공부하고 있다. (열심히 공부해서 성공하겠습니다…! 감사합니다…!)<br><br></p><h2 id="Vmware"><a href="#Vmware" class="headerlink" title="Vmware"></a>Vmware</h2><ul><li>Vmware는 가상환경을 구축할 수 있도록 도와주는 소프트웨어이다. 이를 이용하면 지금 내가 쓰고 있는 컴퓨터 안에 가상의 작은 컴퓨터를 만들 수 있다.</li><li>1대의 컴퓨터 만으로도 실무환경과 거의 유사하게 가상의 작은 전산실을 만들 수 있다.</li><li>특징적인 기능들에는 suspend 기능, 특정 시점을 기억하는 스냅숏 기능 등이 있다.</li><li>focus : ctrl + alt 이용해서 호스트 os 와 가상os 간 마우스, 키보드 등의 포커스 이동을 할 수 있다.</li><li>suspend: 노트북 커버 닫는 정도로 가상 컴퓨터를 완전히 끄지 않고 일시정지하는 것. 절전모드</li><li>poweroff : 가상 컴퓨터의 전원을 완전히 끈다.</li><li>여러개의 가상머신 동시 부팅 가능<br><br><br></li></ul><h2 id="실습을-위한-네트워크-환경-설정"><a href="#실습을-위한-네트워크-환경-설정" class="headerlink" title="실습을 위한 네트워크 환경 설정"></a>실습을 위한 네트워크 환경 설정</h2><h3 id="전체-네트워크-환경"><a href="#전체-네트워크-환경" class="headerlink" title="전체 네트워크 환경"></a>전체 네트워크 환경</h3><p>앞선 글에서 호스트 os, 가상 os 간의 관계와 전체적인 구성을 정리한 바 있다. 각 os 들은 다음과 같은 네트워크 환경을 구축하게 될 것이다. </p><ol><li>진짜 컴퓨터(호스트 컴퓨터)<ol><li>네트워크 카드 </li><li>호스트 OS (192.168.111.1) </li></ol></li><li>VMware 프로그램 <ol><li>게이트웨이 겸 DNS 서버 (192.168.111.2)</li><li>DHCP 서버 (192.168.111.254)</li><li>Server A <ul><li>linux with X-Window</li><li>192.168.111.100</li></ul></li><li>Server B<ul><li>linux </li><li>192.168.111.200</li></ul></li><li>linClient<ul><li>linux</li><li>자동 IP</li></ul></li><li>winClient<ul><li>window</li><li>자동 IP </li></ul></li></ol></li></ol><ul><li><em>참고</em> : <ul><li><em>DHCP server : 다른 컴퓨터에게 자동으로 IP 를 할당해주는 서버</em> </li><li><em>위의 5번의 리눅스 클라이언트와 6번의 윈도우 클라이언트는 이 DHCP 서버에 의해 자동으로 IP 를 할당받게 될 것임</em></li></ul></li></ul><br><h3 id="VMware-Workstation-Pro-에서-네트워크-정보-변경"><a href="#VMware-Workstation-Pro-에서-네트워크-정보-변경" class="headerlink" title="VMware Workstation Pro 에서 네트워크 정보 변경"></a>VMware Workstation Pro 에서 네트워크 정보 변경</h3><p>이에 따라서 현재 내가 쓰고 있는 컴퓨터인 호스트 OS 에서 IP 정보를 확인한 뒤, 위에 정의한 스펙에 맞게 변경하는 작업이 필요하다. </p><ol><li>cmd &gt;&gt; ipconfig /all 로 현재 호스트 os 에 연결되어있는 모든 네트워크 정보 파악</li><li>VMware Network Adapter VMnet8 을 찾아서 IPv4 주소 확인 : 나의 경우는 192.168.191.1(기본 설정) 이었음 </li><li>Workstation Pro에서 IPv4 주소를 위의 스펙에 맞게 192.168.111.1으로 변경<br><br><br></li></ol><h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><h3 id="간단한-정보"><a href="#간단한-정보" class="headerlink" title="간단한 정보"></a>간단한 정보</h3><ul><li>무료 유닉스 </li><li>1991년 리누스 토르발스가 버전 0.01을 최초로 작성함 </li><li>1992년에 0.02 버전을 공개하며 시작됨 </li><li>리누스 토르발스는 사실 리눅스 전체가 아니라 커널만 개발함 <ul><li>배포판 구성<ul><li>하드웨어 : CPU, RAM HDD </li><li>커널 : 엄격한 의미의 리눅스 <ul><li>CentOS8의 경우는 4.18 버전</li><li>사용자가 직접 최신 버전의 커널로 업그레이드 할 수 있음  </li></ul></li><li>셀 : 명령어 해석기. bash, csh 등</li><li>응용프로그램 : 에디터, 통신 프로그램, X 윈도, 웹서버, DB서버 등 </li></ul></li></ul></li><li>GNU project <ul><li>1984년도 리차드 스톨만이 시작 </li><li>모두가 공유할 수 있는 소프트웨어를 만드는 것을 목표로 함 </li><li>GPL license <ul><li>자유 소프트웨어의 수정과 공유의 자유를 보장함 </li><li>프리웨어(무료 소프트웨어) 개념을 넘어서 진정한 자유</li><li>상용 판매는 가능, 하지만 소스를 오픈해야한다는 규약이 존재</li></ul></li></ul></li></ul><br><h3 id="Redhat-Linux-와-CentOS-리눅스"><a href="#Redhat-Linux-와-CentOS-리눅스" class="headerlink" title="Redhat Linux 와 CentOS 리눅스"></a>Redhat Linux 와 CentOS 리눅스</h3><ul><li>레드햇 : 전 세계적으로 가장 유명한 배포판 중 하나 </li><li>상용판매(RHEL) - 로고만 변경한 후에 다시 컴파일 해서 만든 것이 CentOS</li><li>CentOS : 안정적이고 널리 쓰임 </li><li>RHEL 은 유료로만 판매되고 있음 </li><li>보통 발전 순서를 보면 페도라가 업데이트되면, 레드햇이 업데이트 되고 이를 바탕으로 센토스가 업데이트 됨. Fedora28 - RHEL8  - CentOS8</li></ul>]]></content:encoded>
      
      <comments>https://miniminis.github.io/2020/05/14/linux-thisislinux02/#disqus_thread</comments>
    </item>
    
    <item>
      <title>이것이 리눅스다(2020) 00 / 목차</title>
      <link>https://miniminis.github.io/2020/05/13/linux-thisislinux00/</link>
      <guid>https://miniminis.github.io/2020/05/13/linux-thisislinux00/</guid>
      <pubDate>Tue, 12 May 2020 22:09:33 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;비전공자로서 컴퓨터 공학 지식이 많이 부족하다는 것을 몸으로, 머리로 느끼고 있는 하루하루이다. 리눅스를 통해서 운영체제를 공부해볼까하고 찾아보다가 ‘이것이 리눅스다’라는 진리의 책을 발견하였고, 마침 최근에 2020년 개정판이 나와서 그 과정을
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p>비전공자로서 컴퓨터 공학 지식이 많이 부족하다는 것을 몸으로, 머리로 느끼고 있는 하루하루이다. 리눅스를 통해서 운영체제를 공부해볼까하고 찾아보다가 ‘이것이 리눅스다’라는 진리의 책을 발견하였고, 마침 최근에 2020년 개정판이 나와서 그 과정을 따라가보며 공부해보기로 했다.</p><p>좋은 책의 목차는 공부를 하는데 아주 중요한 길잡이가 된다. 전체적인 그림과 흐름을 그릴 수 있도록 해주며 낯선 개념과 단어들에 자연스럽게 노출될 수 있도록 해준다. 오늘은 이 책의 전반적인 목차를 정리하며 앞으로 배우고 익힐 개념들에 대해서 밑그림을 그려보도록 하겠다.<br><br><br><br></p><h2 id="PART01-성공적인-학습을-위한-준비-작업과-CentOS-설치"><a href="#PART01-성공적인-학습을-위한-준비-작업과-CentOS-설치" class="headerlink" title="PART01 성공적인 학습을 위한 준비 작업과 CentOS 설치"></a>PART01 성공적인 학습을 위한 준비 작업과 CentOS 설치</h2><h3 id="CHAPTER-01-실습-환경-구축"><a href="#CHAPTER-01-실습-환경-구축" class="headerlink" title="CHAPTER 01 실습 환경 구축"></a>CHAPTER 01 실습 환경 구축</h3><p>1.1 가상머신의 소개와 설치<br>1.2 가상머신 생성<br>1.3 VMware의 특징<br>1.4 원활한 실습 진행을 위한 사전 준비</p><h3 id="CHAPTER-02-CentOS-리눅스에-대한-간단한-소개"><a href="#CHAPTER-02-CentOS-리눅스에-대한-간단한-소개" class="headerlink" title="CHAPTER 02 CentOS 리눅스에 대한 간단한 소개"></a>CHAPTER 02 CentOS 리눅스에 대한 간단한 소개</h3><p>2.1 리눅스의 개요<br>2.2 CentOS 리눅스 배포판</p><h3 id="CHAPTER-03-CentOS-리눅스-설치"><a href="#CHAPTER-03-CentOS-리눅스-설치" class="headerlink" title="CHAPTER 03 CentOS 리눅스 설치"></a>CHAPTER 03 CentOS 리눅스 설치</h3><p>3.1 3대의 CentOS 설치<br>3.2 WinClient 설치<br><br><br><br></p><h2 id="PART-02-CentOS-리눅스의-기본-개념과-리눅스-관리자의-기본-역할"><a href="#PART-02-CentOS-리눅스의-기본-개념과-리눅스-관리자의-기본-역할" class="headerlink" title="PART 02 CentOS 리눅스의 기본 개념과 리눅스 관리자의 기본 역할"></a>PART 02 CentOS 리눅스의 기본 개념과 리눅스 관리자의 기본 역할</h2><h3 id="CHAPTER-04-서버를-구축할-때-알아야-할-필수-개념과-명령어"><a href="#CHAPTER-04-서버를-구축할-때-알아야-할-필수-개념과-명령어" class="headerlink" title="CHAPTER 04 서버를 구축할 때 알아야 할 필수 개념과 명령어"></a>CHAPTER 04 서버를 구축할 때 알아야 할 필수 개념과 명령어</h3><p>4.1 리눅스 운영 전에 알아야 할 개념<br>4.2 리눅스 기본 명령어<br>4.3 사용자 관리와 파일 속성<br>4.4 리눅스 관리자를 위한 명령어<br>4.5 네트워크 관련 설정과 명령어<br>4.6 파이프, 필터, 리디렉션<br>4.7 프로세스, 데몬, 서비스<br>4.8 서비스와 소켓<br>4.9 응급 복구<br>4.10 GRUB 부트로더<br>4.11 간단한 커널 컴파일</p><h3 id="CHAPTER-05-X-윈도를-사용해보자"><a href="#CHAPTER-05-X-윈도를-사용해보자" class="headerlink" title="CHAPTER 05 X 윈도를 사용해보자"></a>CHAPTER 05 X 윈도를 사용해보자</h3><p>5.1 그놈 데스크톱 환경 설정<br>5.2 X 윈도 응용프로그램<br>5.3 소프트웨어 센터<br>5.4 리눅스에서 Windows 응용프로그램 실행</p><h3 id="CHAPTER-06-하드디스크-관리와-사용자별-공간-할당"><a href="#CHAPTER-06-하드디스크-관리와-사용자별-공간-할당" class="headerlink" title="CHAPTER 06 하드디스크 관리와 사용자별 공간 할당"></a>CHAPTER 06 하드디스크 관리와 사용자별 공간 할당</h3><p>6.1 하드디스크 한 개 추가하기<br>6.2 여러 개의 하드디스크를 하나처럼 사용하기<br>6.3 LVM<br>6.4 CentOS를 RAID에 설치하기<br>6.5 사용자별로 공간을 할당해주자</p><h3 id="CHAPTER-07-셸-스크립트-프로그래밍"><a href="#CHAPTER-07-셸-스크립트-프로그래밍" class="headerlink" title="CHAPTER 07 셸 스크립트 프로그래밍"></a>CHAPTER 07 셸 스크립트 프로그래밍</h3><p>7.1 셸의 기본<br>7.2 셸 스크립트 프로그래밍 실습<br><br><br><br></p><h2 id="PART-03-네트워크-서버-구축-실무-I"><a href="#PART-03-네트워크-서버-구축-실무-I" class="headerlink" title="PART 03 네트워크 서버 구축 실무 I"></a>PART 03 네트워크 서버 구축 실무 I</h2><h3 id="CHAPTER-08-원격지-시스템-관리"><a href="#CHAPTER-08-원격지-시스템-관리" class="headerlink" title="CHAPTER 08 원격지 시스템 관리"></a>CHAPTER 08 원격지 시스템 관리</h3><p>8.1 텔넷 서버<br>8.2 OpenSSH 서버<br>8.3 XRDP 서버</p><h3 id="CHAPTER-09-네임-서버-설치와-운영"><a href="#CHAPTER-09-네임-서버-설치와-운영" class="headerlink" title="CHAPTER 09 네임 서버 설치와 운영"></a>CHAPTER 09 네임 서버 설치와 운영</h3><p>9.1 네임 서버의 개념<br>9.2 네임 서버의 구축</p><h3 id="CHAPTER-10-메일-서버-설치와-운영"><a href="#CHAPTER-10-메일-서버-설치와-운영" class="headerlink" title="CHAPTER 10 메일 서버 설치와 운영"></a>CHAPTER 10 메일 서버 설치와 운영</h3><p>10.1 메일 서버의 개념<br>10.2 센드메일 서버 구현<br>10.3 웹 메일 설치 및 사용</p><h3 id="CHAPTER-11-데이터베이스-서버-구축과-운영"><a href="#CHAPTER-11-데이터베이스-서버-구축과-운영" class="headerlink" title="CHAPTER 11 데이터베이스 서버 구축과 운영"></a>CHAPTER 11 데이터베이스 서버 구축과 운영</h3><p>11.1 DBMS의 개념과 간단한 SQL문<br>11.2 MariaDB 설치와 운영<br>11.3 Windows용 응용프로그램과 리눅스 DBMS의 연동<br>11.4 Oracle Database Express의 설치와 운영</p><h3 id="CHAPTER-12-웹-서버-설치와-운영"><a href="#CHAPTER-12-웹-서버-설치와-운영" class="headerlink" title="CHAPTER 12 웹 서버 설치와 운영"></a>CHAPTER 12 웹 서버 설치와 운영</h3><p>12.1 APM 설치와 웹 사이트 구축<br>12.2 웹 서버의 응용 서비스<br>12.3 웹 서버 설정 파일<br><br><br><br></p><h2 id="Part04-네트워크-서버-구축-실무-II"><a href="#Part04-네트워크-서버-구축-실무-II" class="headerlink" title="Part04 네트워크 서버 구축 실무 II"></a>Part04 네트워크 서버 구축 실무 II</h2><h3 id="CHAPTER-13-FTP-서버-설치와-운영"><a href="#CHAPTER-13-FTP-서버-설치와-운영" class="headerlink" title="CHAPTER 13 FTP 서버 설치와 운영"></a>CHAPTER 13 FTP 서버 설치와 운영</h3><p>13.1 vsftpd의 설치와 운영<br>13.2 proFTPD의 설치와 운영</p><h3 id="CHAPTER-14-NFS-서버-설치와-운영"><a href="#CHAPTER-14-NFS-서버-설치와-운영" class="headerlink" title="CHAPTER 14 NFS 서버 설치와 운영"></a>CHAPTER 14 NFS 서버 설치와 운영</h3><p>14.1 NFS 서버 구현</p><h3 id="CHAPTER-15-Samba-서버-설치와-운영"><a href="#CHAPTER-15-Samba-서버-설치와-운영" class="headerlink" title="CHAPTER 15 Samba 서버 설치와 운영"></a>CHAPTER 15 Samba 서버 설치와 운영</h3><p>15.1 리눅스에서 Windows의 폴더와 프린터 사용<br>15.2 Windows에서 리눅스 폴더와 프린터의 사용</p><h3 id="CHAPTER-16-DHCP-서버-설치와-운영"><a href="#CHAPTER-16-DHCP-서버-설치와-운영" class="headerlink" title="CHAPTER 16 DHCP 서버 설치와 운영"></a>CHAPTER 16 DHCP 서버 설치와 운영</h3><p>16.1 DHCP 개념<br>16.2 DHCP 구현</p><h3 id="CHAPTER-17-프록시-서버-설치와-운영"><a href="#CHAPTER-17-프록시-서버-설치와-운영" class="headerlink" title="CHAPTER 17 프록시 서버 설치와 운영"></a>CHAPTER 17 프록시 서버 설치와 운영</h3><p>17.1 프록시 서버의 개념<br>17.2 프록시 서버의 구현</p><h3 id="CHAPTER-18-방화벽-컴퓨터-만들기"><a href="#CHAPTER-18-방화벽-컴퓨터-만들기" class="headerlink" title="CHAPTER 18 방화벽 컴퓨터 만들기"></a>CHAPTER 18 방화벽 컴퓨터 만들기</h3><p>18.1 보안을 위한 네트워크 설계<br>18.2 리눅스 방화벽 컴퓨터 구축</p><h3 id="CHAPTER-19-PXE-설치-서버"><a href="#CHAPTER-19-PXE-설치-서버" class="headerlink" title="CHAPTER 19 PXE 설치 서버"></a>CHAPTER 19 PXE 설치 서버</h3><p>19.1 PXE 설치 서버의 개념과 구현<br>19.2 킥스타트</p>]]></content:encoded>
      
      <comments>https://miniminis.github.io/2020/05/13/linux-thisislinux00/#disqus_thread</comments>
    </item>
    
    <item>
      <title>이것이 리눅스다(2020) 01 / 가상머신 설치 + Window10 가상OS 설치에러</title>
      <link>https://miniminis.github.io/2020/05/13/linux-thisislinux01/</link>
      <guid>https://miniminis.github.io/2020/05/13/linux-thisislinux01/</guid>
      <pubDate>Tue, 12 May 2020 21:42:05 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;‘이것이 리눅스다 2020년 개정판’을 공부하고 있다. 나와 같이 블로그나 글을 통해 공부하는 것이 더 편한 사람들을 위해 공부의 과정을 간단하게나마 글로 남기고자 한다. 책은 &lt;a href=&quot;https://www.hanbit.co.kr/stor
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p>‘이것이 리눅스다 2020년 개정판’을 공부하고 있다. 나와 같이 블로그나 글을 통해 공부하는 것이 더 편한 사람들을 위해 공부의 과정을 간단하게나마 글로 남기고자 한다. 책은 <a href="https://www.hanbit.co.kr/store/books/look.php?p_code=B8529915277" target="_blank" rel="noopener">[링크]</a>를 통해 구입할 수 있고, 강의는 <a href="https://www.youtube.com/playlist?list=PLVsNizTWUw7EJ9z-LW3lv3VC-6HI9I3hN" target="_blank" rel="noopener">[링크]</a>에서 확인할 수 있다. 한빛에서 네이버 카페<a href="https://cafe.naver.com/thisislinux" target="_blank" rel="noopener">[링크]</a>도 운영하고 있어서 정말 편하게 공부하고 있다. (열심히 공부해서 성공하겠습니다…! 감사합니다…!)<br><br></p><h2 id="OS-구성"><a href="#OS-구성" class="headerlink" title="OS 구성"></a>OS 구성</h2><ol><li>호스트 OS : Window 10 </li><li>리눅스 서버A with X-window : CentOS8</li><li>리눅스 서버B : CentOS8</li><li>리눅스 클라이언트 with X-window : CentOS8</li><li>윈도우 클라이언트 : Window 10</li></ol><p>1번은 현재 내 PC 의 OS 이고 2-5번은 VMWare를 통해 구성할 것이다.<br><br></p><h2 id="가상머신-종류와-VMWare-설치"><a href="#가상머신-종류와-VMWare-설치" class="headerlink" title="가상머신 종류와 VMWare 설치"></a>가상머신 종류와 VMWare 설치</h2><table><thead><tr><th align="left"></th><th align="left">VMWare WorkStation Pro</th><th align="left">WMWare Workstation Player</th></tr></thead><tbody><tr><td align="left">라이선스</td><td align="left">유료</td><td align="left">무료</td></tr><tr><td align="left">가상머신 생성기능</td><td align="left">있음</td><td align="left">없음</td></tr><tr><td align="left">스냅숏 기능</td><td align="left">있음</td><td align="left">없음</td></tr><tr><td align="left">가상 네트워크 사용자 설정 기능</td><td align="left">있음</td><td align="left">없음</td></tr></tbody></table><p>VMWare 는 유료인 프로 버전과 무료인 플레이어 버전이 있다. 현재 설정을 사진처럼 찍어서 그대로 기억할 수 있는 스냅숏 기능은 프로버전에서만 쓸 수 있다. 30일 무료로 프로 버전을 이용할 수 있으므로 나는 프로와 플레이어 두 개를 다 설치하고 스냅숏 기능만 프로 버전에서 사용하였다. (책 및 강의 참조)</p><p><a href="https://www.vmware.com/content/vmware/vmware-published-sites/us/products/workstation-pro/workstation-pro-evaluation.html.html" target="_blank" rel="noopener">[링크]</a>에서 다운로드한 뒤 프로와 플레이어 모두 설치하면 완료.</p><p>VMWare 설치 후에, 테스트 용으로 가상 OS 하나를 설치한 뒤 로딩해본다.</p><br><h2 id="가상-OS-실행-중-에러-발생"><a href="#가상-OS-실행-중-에러-발생" class="headerlink" title="가상 OS 실행 중 에러 발생"></a>가상 OS 실행 중 에러 발생</h2><p>역시나 세상에는 쉬운게 없다. VMware 설치 후에 테스트 os 를 성공적으로 로딩하는 과정에서 3가지의 에러를 겪었다.<br><br></p><h3 id="ERROR-1-microsoft-VC-재배포-가능-패키지-설치를-마친-후에-다시-설치해야합니다"><a href="#ERROR-1-microsoft-VC-재배포-가능-패키지-설치를-마친-후에-다시-설치해야합니다" class="headerlink" title="ERROR 1. microsoft VC 재배포 가능 패키지 설치를 마친 후에 다시 설치해야합니다."></a>ERROR 1. microsoft VC 재배포 가능 패키지 설치를 마친 후에 다시 설치해야합니다.</h3><p>해결은 다음의 글들을 참고하였다. </p><ul><li><a href="https://4ccd.net/590" target="_blank" rel="noopener">https://4ccd.net/590</a></li><li><a href="https://support.microsoft.com/ko-kr/help/2977003/the-latest-supported-visual-c-downloads" target="_blank" rel="noopener">https://support.microsoft.com/ko-kr/help/2977003/the-latest-supported-visual-c-downloads</a></li></ul><br><h3 id="ERROR-2-Error-while-powering-on-This-host-supports-Intel-VT-x-but-Intel-VT-x-is-disabled"><a href="#ERROR-2-Error-while-powering-on-This-host-supports-Intel-VT-x-but-Intel-VT-x-is-disabled" class="headerlink" title="ERROR 2. Error while powering on: This host supports Intel VT-x, but Intel VT-x is disabled."></a>ERROR 2. Error while powering on: This host supports Intel VT-x, but Intel VT-x is disabled.</h3><p>Window 10의 경우, 다음과 같은 에러메시지가 나타날 수 있다. 실제로 나도 같은 에러를 겪었다. </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error while powering on: This host supports Intel VT-x, but Intel VT-x is disabled.</span><br></pre></td></tr></table></figure><p>구글링을 해보니, 인텔은 VT-x라는 가상화 기술을 지원하는데, 가상머신들의 우선순위로 인해 발생되는 병목현상을 막는 기술이라고 한다. 지금의 에러 메시지에서는 이 기능이 disabled 되었다고 하니, 컴퓨터의 BIOS 설정에서 Virtual Machine 을 enabled 로 설정해주면 해당 메시지는 사라지게 된다. </p><ul><li>참고로 BIOS 설정은 컴퓨터 최초 로딩 시에 F2 혹은 delete 키를 눌러서 접근할 수 있다. 구글링해보면 많은 결과가 있으니 참고하시길.</li></ul><br><h3 id="ERROR-3-VMware-Player-and-Device-Credential-Guard-are-not-compatible-VMware-Player-can-be-run-after-disabling-Device-Credential-Guard-Please-visit-http-www-vmware-com-go-turnoff-CG-DG-for-more-details"><a href="#ERROR-3-VMware-Player-and-Device-Credential-Guard-are-not-compatible-VMware-Player-can-be-run-after-disabling-Device-Credential-Guard-Please-visit-http-www-vmware-com-go-turnoff-CG-DG-for-more-details" class="headerlink" title="ERROR 3. VMware Player and Device/Credential Guard are not compatible. VMware Player can be run after disabling Device/Credential Guard. Please visit http://www.vmware.com/go/turnoff_CG_DG for more details."></a>ERROR 3. VMware Player and Device/Credential Guard are not compatible. VMware Player can be run after disabling Device/Credential Guard. Please visit <a href="http://www.vmware.com/go/turnoff_CG_DG" target="_blank" rel="noopener">http://www.vmware.com/go/turnoff_CG_DG</a> for more details.</h3><p>위의 에러를 지나고 다시 vmware 로 돌아와서 가상 OS 를 로딩해보면 또 다른 메시지가 나타날 수 있다. </p><p>문제는 Device/Credential Guard 때문인데, 다음과 같은 방법으로 해결하였다. </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. 명령 프롬프트를 관리자 권한으로 실행</span><br><span class="line">2. bcdedit /set hypervisorlaunchtype off </span><br><span class="line">3. 호스트 컴퓨터 재부팅</span><br></pre></td></tr></table></figure><p>아래의 글들을 참고하였다. </p><ul><li><a href="https://kb.vmware.com/s/article/2146361" target="_blank" rel="noopener">https://kb.vmware.com/s/article/2146361</a></li><li><a href="https://jinyiyu.tistory.com/11" target="_blank" rel="noopener">https://jinyiyu.tistory.com/11</a></li></ul><br><br><p>무사히 VMware 설치 및 테스트 os 로딩을 완료했다면 이제 본격적으로 서버 하나하나 구성을 시작해보자!</p>]]></content:encoded>
      
      <comments>https://miniminis.github.io/2020/05/13/linux-thisislinux01/#disqus_thread</comments>
    </item>
    
    <item>
      <title>이미지, 웹페이지 크롤링하여 컴퓨터에 저장하기</title>
      <link>https://miniminis.github.io/2020/03/03/python-crawling-basic02/</link>
      <guid>https://miniminis.github.io/2020/03/03/python-crawling-basic02/</guid>
      <pubDate>Tue, 03 Mar 2020 00:23:28 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;이미지-웹페이지-크롤링하여-컴퓨터에-저장하기&quot;&gt;&lt;a href=&quot;#이미지-웹페이지-크롤링하여-컴퓨터에-저장하기&quot; class=&quot;headerlink&quot; title=&quot;이미지, 웹페이지 크롤링하여 컴퓨터에 저장하기&quot;&gt;&lt;/a&gt;이미지, 웹페이지 크롤링
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="이미지-웹페이지-크롤링하여-컴퓨터에-저장하기"><a href="#이미지-웹페이지-크롤링하여-컴퓨터에-저장하기" class="headerlink" title="이미지, 웹페이지 크롤링하여 컴퓨터에 저장하기"></a>이미지, 웹페이지 크롤링하여 컴퓨터에 저장하기</h2><p>인터넷과 강의를 들으면서 크롤링의 세계에 조금씩 입문하고 있다. 간단한 예제 코드를 올려봅니다. </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import urllib.request as req</span><br><span class="line"></span><br><span class="line">img_url = &quot;https://images.theconversation.com/files/307636/original/file-20191218-11891-rdedzs.jpg?ixlib=rb-1.1.0&amp;rect=0%2C601%2C4611%2C2965&amp;q=45&amp;auto=format&amp;w=926&amp;fit=clip&quot;</span><br><span class="line">html_url= &quot;https://www.google.com&quot;</span><br><span class="line"></span><br><span class="line">save_path1 = &quot;C:/python-crawling/image.jpg&quot;      # 파일 이름, 포맷 명시 안하면 permission denied 에러 뜸 </span><br><span class="line">save_path2 = &quot;C:/python-crawling/index.html&quot;</span><br><span class="line"></span><br><span class="line">try:</span><br><span class="line">    file1, header1 = req.urlretrieve(img_url, save_path1)</span><br><span class="line">    file2, header2 = req.urlretrieve(html_url, save_path2)</span><br><span class="line">except Exception as e:</span><br><span class="line">    print(&apos;Download 실패&apos;)</span><br><span class="line">    print(e)</span><br><span class="line">else :</span><br><span class="line">    # header 정보 출력해보기</span><br><span class="line">    print(header1)</span><br><span class="line">    print(header2)</span><br><span class="line"></span><br><span class="line">    # file 형식 출력</span><br><span class="line">    print(&apos;Filename 1 : &#123;&#125;&apos;.format(file1))</span><br><span class="line">    print(&apos;Filename 2 : &#123;&#125;&apos;.format(file2))</span><br><span class="line"></span><br><span class="line">    # 전송성공!</span><br><span class="line">    print(&apos;Download Success!!!&apos;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 결과</span><br><span class="line"># Connection: close</span><br><span class="line"># Content-Length: 55246</span><br><span class="line"># Last-Modified: Mon, 24 Feb 2020 10:31:16 GMT</span><br><span class="line"># Cache-Control: public, max-age=31536000</span><br><span class="line"># Server: imgix</span><br><span class="line"># X-Imgix-ID: 6c89ed49152677665f2385f57357550a2a41b3d8</span><br><span class="line"># Date: Mon, 02 Mar 2020 23:53:17 GMT</span><br><span class="line"># Age: 652936</span><br><span class="line"># Accept-Ranges: bytes</span><br><span class="line"># Content-Type: image/jpeg</span><br><span class="line"># Access-Control-Allow-Origin: *</span><br><span class="line"># X-Content-Type-Options: nosniff</span><br><span class="line"># X-Served-By: cache-lax8636-LAX, cache-bur17578-BUR</span><br><span class="line"># X-Cache: HIT, HIT</span><br><span class="line"># Vary: Accept, User-Agent</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Date: Mon, 02 Mar 2020 23:53:17 GMT</span><br><span class="line"># Expires: -1</span><br><span class="line"># Cache-Control: private, max-age=0</span><br><span class="line"># Content-Type: text/html; charset=ISO-8859-1</span><br><span class="line"># P3P: CP=&quot;This is not a P3P policy! See g.co/p3phelp for more info.&quot;</span><br><span class="line"># Server: gws</span><br><span class="line"># X-XSS-Protection: 0</span><br><span class="line"># X-Frame-Options: SAMEORIGIN</span><br><span class="line"># Set-Cookie: 1P_JAR=2020-03-02-23; expires=Wed, 01-Apr-2020 23:53:17 GMT; path=/; domain=.google.com; Secure</span><br><span class="line"># Set-Cookie: NID=199=h1Kz0zQtG4dLG9tlPoHgMBmnllcpmkT5-JhYS0cZhzhxV9-7jd64iDBoFlv5L1Pe1nJ9Da2Tvx2PYyA20C5NusnLg79aG6bYnDPkULWJ9oZRn_3Yl7u_4fnLgacga9Qx-sZtte8CIYVOGhboNvkJAcVvnNJNe5azmf7DJHpkUx0; expires=Tue, 01-Sep-2020 23:53:17 GMT; path=/; domain=.google.com; HttpOnly</span><br><span class="line"># Alt-Svc: quic=&quot;:443&quot;; ma=2592000; v=&quot;46,43&quot;,h3-Q050=&quot;:443&quot;; ma=2592000,h3-Q049=&quot;:443&quot;; ma=2592000,h3-Q048=&quot;:443&quot;; ma=2592000,h3-Q046=&quot;:443&quot;; ma=2592000,h3-Q043=&quot;:443&quot;; ma=2592000</span><br><span class="line"># Accept-Ranges: none</span><br><span class="line"># Vary: Accept-Encoding</span><br><span class="line"></span><br><span class="line"># Filename 1 : C:/python-crawling/image02.jpg</span><br><span class="line"># Filename 2 : C:/python-crawling/index.html</span><br><span class="line"># Download Success!!</span><br></pre></td></tr></table></figure><p>햅삐한 크롤링 하세요~!</p>]]></content:encoded>
      
      <comments>https://miniminis.github.io/2020/03/03/python-crawling-basic02/#disqus_thread</comments>
    </item>
    
    <item>
      <title>파이썬 크롤링 데이터 컴퓨터에 저장시 PermissionError [Errno 13] Permission denied 해결</title>
      <link>https://miniminis.github.io/2020/03/03/python-crawling-basic01/</link>
      <guid>https://miniminis.github.io/2020/03/03/python-crawling-basic01/</guid>
      <pubDate>Tue, 03 Mar 2020 00:23:23 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;파이썬-크롤링-데이터-컴퓨터에-저장시-PermissionError-Errno-13-Permission-denied-해결&quot;&gt;&lt;a href=&quot;#파이썬-크롤링-데이터-컴퓨터에-저장시-PermissionError-Errno-13-Permissi
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="파이썬-크롤링-데이터-컴퓨터에-저장시-PermissionError-Errno-13-Permission-denied-해결"><a href="#파이썬-크롤링-데이터-컴퓨터에-저장시-PermissionError-Errno-13-Permission-denied-해결" class="headerlink" title="파이썬 크롤링 데이터 컴퓨터에 저장시 PermissionError [Errno 13] Permission denied 해결"></a>파이썬 크롤링 데이터 컴퓨터에 저장시 PermissionError [Errno 13] Permission denied 해결</h2><p>요즘, 파이썬 크롤링을 조금씩 배우고 있는데, 꽤나 재밌는 것 같다. 콘솔창에만 조금씩 찍어보면서 신기해하다가 컴퓨터 내에 저장하려고 했는데, permission error 가 발생했다.<br>문제의 코드는 아래와 같다.<br><br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import urllib.request as req</span><br><span class="line"></span><br><span class="line">img_url = &quot;https://images.theconversation.com/files/307636/original/file-20191218-11891-rdedzs.jpg?ixlib=rb-1.1.0&amp;rect=0%2C601%2C4611%2C2965&amp;q=45&amp;auto=format&amp;w=926&amp;fit=clip&quot;</span><br><span class="line">html_url= &quot;https://www.google.com&quot;</span><br><span class="line"></span><br><span class="line">save_path1 = &quot;C:/python-crawling/&quot;      # 파일 이름, 포맷 명시 안하면 permission denied 에러 뜸 </span><br><span class="line">save_path2 = &quot;C:/python-crawling/index.html&quot;</span><br></pre></td></tr></table></figure><p>관련해서 구글링을 해본 결과, 감사한 블로그 포스팅을 볼 수 있었다.   <em><a href="http://blog.naver.com/PostView.nhn?blogId=wjddudwo209&logNo=221437740937&categoryNo=75&parentCategoryNo=0&viewDate=&currentPage=1&postListTopCurrentPage=1&from=postView" target="_blank" rel="noopener">참고링크</a></em><br><br></p><p>의심되는 문제는 5가지.</p><ol><li>경로가 틀렸을 때</li><li>파일명을 명시하지 않았을 때</li><li>파일 포맷을 명시하지 않았을 때 </li><li>디렉토리 구분자를 / 로 안바꾸어줬을 때</li><li>파일 개수가 너무 많을 때 </li></ol><p>하지만 2번과 3번의 경우, 다운로드에는 문제가 없으나 2번의 경우는 파일 이름이 없는채로, 3번의 경우는 확장자가 없는 채로 다운받아진다는 것을 확인하였다. </p><p>모두 즐거운 크롤링하쎄영!<br><br><br></p><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="http://blog.naver.com/PostView.nhn?blogId=wjddudwo209&logNo=221437740937&categoryNo=75&parentCategoryNo=0&viewDate=&currentPage=1&postListTopCurrentPage=1&from=postView" target="_blank" rel="noopener">참고링크-네이버블로그</a></li></ul>]]></content:encoded>
      
      <comments>https://miniminis.github.io/2020/03/03/python-crawling-basic01/#disqus_thread</comments>
    </item>
    
    <item>
      <title>안드로이드 proguard 난독화 해제하지 않고 firebase crashlytics 에러 메시지 확인하기, proguard/R8 이해하기, proguard/R8 예제</title>
      <link>https://miniminis.github.io/2020/03/02/android-proguard/</link>
      <guid>https://miniminis.github.io/2020/03/02/android-proguard/</guid>
      <pubDate>Mon, 02 Mar 2020 10:55:16 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;안드로이드-proguard-난독화-해제하지-않고-firebase-crashlytics-에러-메시지-확인하기&quot;&gt;&lt;a href=&quot;#안드로이드-proguard-난독화-해제하지-않고-firebase-crashlytics-에러-메시지-확인하기&quot; 
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="안드로이드-proguard-난독화-해제하지-않고-firebase-crashlytics-에러-메시지-확인하기"><a href="#안드로이드-proguard-난독화-해제하지-않고-firebase-crashlytics-에러-메시지-확인하기" class="headerlink" title="안드로이드 proguard 난독화 해제하지 않고 firebase crashlytics 에러 메시지 확인하기"></a>안드로이드 proguard 난독화 해제하지 않고 firebase crashlytics 에러 메시지 확인하기</h2><p>안드로이드의 세계에 발을 들인지, 어느새 3개월이 되었다. 아직 지식이 많이 부족하고 할 일도 태산이지만, 짧은 기간동안 엄청나게 많은 경험을 하고 있어서 아직은 신난다. (아직은…). </p><p>우리 회사에서는 <strong>firebase crashlytics</strong> 를 이용하여 어플리케이션을 모니터링하고 있다. 사용자가 접근하는 모든 화면마다 일종의 발자국을 남겨서 crash 가 발생하게 되면 해당 화면의 위치는 물론, 사용자의 device 정보, 기기 내 메모리, 안드로이드 OS 버전까지 알 수 있다. 심지어는 에러 메시지까지 자세하게 보여주기 때문에 어플리케이션의 유지/보수에 꽤나 유용하다. </p><p>앱에 crash 가 발생하면 자동으로 회사 메일로 crash report 가 날라오는데, 오늘 보는 이녀석은 에러 메시지가 참으로 심플한게 뭔가 이상했다. </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Fatal Exception: java.lang.RuntimeException: Unable to pause activity: h.d</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">...</span><br><span class="line">Caused by h.d</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>?????????????????????????</p><p>보통은 에러로그와 메시지가 아주 장황하게 늘어져있어서, 메시지를 보기만해도 ‘아 어떤 화면에서 어떤게 잘못됐겠구나’하고 짐작을 할 수가 있는데, 이건 뭐… 액티비티를 왜 멈출 수 없니 ㅠㅠㅠ<br><br></p><h3 id="에러는-일단-구글링"><a href="#에러는-일단-구글링" class="headerlink" title="에러는 일단 구글링"></a>에러는 일단 구글링</h3><p>한눈에 짐작할 수 없는 에러면 일단 구글님께 보여드려야지. 구글에 에러메시지를 갖다가 붙였는데, 이럴수가, 단 한건도 일치하는 결과가 없다. 검색어를 요리조리 바꿔가며 검색해보았지만, 만족할만한 결과가 나오지 않았다. 그렇게 오전 근무시간 내내 그 에러와 사투를 벌였는데, 점심시간에 이사님이 엄청난 힌트를 주셨다. </p><p>요약하자면, </p><ol><li>안드로이드 어플리케이션은 proguard 난독화 과정을 거치지 않고 올리면 다른 사람들이 apk 를 풀어서 내부 소스 코드를 확인할 수 있음 </li><li>따라서 제대로 만든 어플리케이션은 proguard 를 통해 난독화 되어있음</li><li>문제는 난독화 되어있는 어플의 경우, crash report 도 암호화된 코드로 전달되기에 한눈에 확인할 수 없음 </li></ol><br>오케이. 단서를 알아냈으니 proguard가 무엇인지, 어떻게 난독해제를 하여 에러 메시지에 접근할 것인지를 확인하면 될터이다. <br><br><br><h2 id="proguard-R8-이해하기-사용하기-예제"><a href="#proguard-R8-이해하기-사용하기-예제" class="headerlink" title="proguard/R8 이해하기, 사용하기, 예제"></a>proguard/R8 이해하기, 사용하기, 예제</h2><h3 id="일단-proguard는-무엇인가"><a href="#일단-proguard는-무엇인가" class="headerlink" title="일단, proguard는 무엇인가?"></a>일단, proguard는 무엇인가?</h3><p>proguard는 코드 축소, 리소스 축소, 난독화, 최적화 등을 통해 안드로이드 어플리케이션의 크기를 최대한 작게 만들어주는 도구이다. 안드로이드 공식문서에 따르면 다음과 같이 정리할 수 있다. </p><ol><li>코드 축소 : 사용하지 않는 클래스, 필드, 매서드, 속성을 감지하여 안전하게 삭제</li><li>리소스 축소 : 앱의 라이브러리 종속성에서 사용하지 않는 리소스를 포함하여 패키징된 앱에서 사용하지 않는 리소스를 삭제함 </li><li>난독화 : 클래스와 멤버 이름을 줄여서 dex file 의 크기를 줄임</li><li>최적화 : 코드를 검사하고 다시 작성해서 앱의 dex file의 크기를 더 줄임</li></ol><p>이때, 우리가 오늘 주목할 것은 바로 <strong>‘난독화’</strong>인데, 이 난독화의 과정을 거치면 단순히 앱의 크기가 줄어드는 것뿐만 아니라, 앱 내의 클래스와 멤버 이름들이 모두 의미없는 이름으로 변형되어 다른 사람들이 apk 를 decompile 해보아도 소스 코드를 분석할 수 없게 만든다. 이것을 풀려면 난독해제 파일이 있어야만 가능하다.<br><br></p><h3 id="proguard-와-R8-컴파일러"><a href="#proguard-와-R8-컴파일러" class="headerlink" title="proguard 와 R8 컴파일러"></a>proguard 와 R8 컴파일러</h3><p>역시 안드로이드는 계륵같은 존재. proguard 를 막 파보고 있는데, 안드로이드 공식문서의 “앱축소” 파트에서 Android plugin 3.4 이상부터는 더이상 proguard 를 사용하지 않고 R8 컴파일러를 사용한다고 한다.하하^^. 그래도 하는 역할과 규칙들은 proguard와 호환되므로 android gradle plugin 버전을 업데이트 해도 큰 문제는 없을 것 같다. proguard 와 R8 컴파일러의 규칙이 거의 동일하므로, 좀 더 최신 버전인 R8 컴파일러를 이용한 예제를 살펴보도록 하자.<br><br></p><h3 id="proguard-R8-난독화하기"><a href="#proguard-R8-난독화하기" class="headerlink" title="proguard/R8 난독화하기"></a>proguard/R8 난독화하기</h3><h4 id="1-난독화-전-proguard-rules-pro-txt-파일-minifyEnabled-false-상태"><a href="#1-난독화-전-proguard-rules-pro-txt-파일-minifyEnabled-false-상태" class="headerlink" title="1. 난독화 전, proguard-rules.pro.txt 파일 (minifyEnabled false 상태)"></a>1. 난독화 전, proguard-rules.pro.txt 파일 (minifyEnabled false 상태)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># Add project specific ProGuard rules here.</span><br><span class="line"># You can control the set of applied configuration files using the</span><br><span class="line"># proguardFiles setting in build.gradle.</span><br><span class="line">#</span><br><span class="line"># For more details, see</span><br><span class="line">#   http://developer.android.com/guide/developing/tools/proguard.html</span><br><span class="line"></span><br><span class="line"># If your project uses WebView with JS, uncomment the following</span><br><span class="line"># and specify the fully qualified class name to the JavaScript interface</span><br><span class="line"># class:</span><br><span class="line">#-keepclassmembers class fqcn.of.javascript.interface.for.webview &#123;</span><br><span class="line">#   public *;</span><br><span class="line">#&#125;</span><br><span class="line"></span><br><span class="line"># Uncomment this to preserve the line number information for</span><br><span class="line"># debugging stack traces.</span><br><span class="line">#-keepattributes SourceFile,LineNumberTable</span><br><span class="line"></span><br><span class="line"># If you keep the line number information, uncomment this to</span><br><span class="line"># hide the original source file name.</span><br><span class="line">#-renamesourcefileattribute SourceFile</span><br></pre></td></tr></table></figure><p>보이는 것과 같이 모든 항목이 주석 상태이다. 이 곳에 R8 컴파일러 규칙에 맞게 문서를 작성한다. 이제, proguard/R8를 활성화 시켜주어 코드 난독화를 적용해보자.<br><br></p><h4 id="2-난독화-하기"><a href="#2-난독화-하기" class="headerlink" title="2. 난독화 하기"></a>2. 난독화 하기</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// app 단위의 build.gradle 파일 </span><br><span class="line"></span><br><span class="line">buildTypes &#123;</span><br><span class="line">        debug &#123;</span><br><span class="line">            minifyEnabled true</span><br><span class="line">            proguardFiles getDefaultProguardFile(&apos;proguard-android-optimize.txt&apos;), &apos;proguard-rules.pro&apos;</span><br><span class="line">        &#125;</span><br><span class="line">        release &#123;</span><br><span class="line">            minifyEnabled true</span><br><span class="line">            proguardFiles getDefaultProguardFile(&apos;proguard-android-optimize.txt&apos;), &apos;proguard-rules.pro&apos;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>코드는 이게 전부이다. 이제 apk 로 컴파일한 뒤 난독화 된 결과를 확인해보자.<br><br></p><h4 id="3-apk-decompile-하여-난독화-확인하기"><a href="#3-apk-decompile-하여-난독화-확인하기" class="headerlink" title="3. apk decompile 하여 난독화 확인하기"></a>3. apk decompile 하여 난독화 확인하기</h4><p>아래의 링크를 참고하여 아까 만들어 둔 apk를 decompile 해보았다.  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line">//난독화 전</span><br><span class="line">package com.example.udacity_diceroller;</span><br><span class="line"></span><br><span class="line">import android.os.Bundle;</span><br><span class="line">import android.view.View;</span><br><span class="line">import android.widget.Button;</span><br><span class="line">import android.widget.ImageView;</span><br><span class="line">import androidx.appcompat.app.AppCompatActivity;</span><br><span class="line">import java.util.HashMap;</span><br><span class="line">import kotlin.Metadata;</span><br><span class="line">import kotlin.jvm.internal.Intrinsics;</span><br><span class="line">import kotlin.random.Random;</span><br><span class="line"></span><br><span class="line">@Metadata(bv = &#123;1, 0, 3&#125;, d1 = &#123;&quot;\u0000 \n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0002\u0018\u00002\u00020\u0001B\u0005¢\u0006\u0002\u0010\u0002J\u0012\u0010\u0005\u001a\u00020\u00062\b\u0010\u0007\u001a\u0004\u0018\u00010\bH\u0014J\b\u0010\t\u001a\u00020\u0006H\u0002R\u000e\u0010\u0003\u001a\u00020\u0004X.¢\u0006\u0002\n\u0000¨\u0006\n&quot;&#125;, d2 = &#123;&quot;Lcom/example/udacity_diceroller/MainActivity;&quot;, &quot;Landroidx/appcompat/app/AppCompatActivity;&quot;, &quot;()V&quot;, &quot;diceImg&quot;, &quot;Landroid/widget/ImageView;&quot;, &quot;onCreate&quot;, &quot;&quot;, &quot;savedInstanceState&quot;, &quot;Landroid/os/Bundle;&quot;, &quot;rollDice&quot;, &quot;app_debug&quot;&#125;, k = 1, mv = &#123;1, 1, 16&#125;)</span><br><span class="line">/* compiled from: MainActivity.kt */</span><br><span class="line">public final class MainActivity extends AppCompatActivity &#123;</span><br><span class="line">    private HashMap _$_findViewCache;</span><br><span class="line">    private ImageView diceImg;</span><br><span class="line"></span><br><span class="line">    public void _$_clearFindViewByIdCache() &#123;</span><br><span class="line">        HashMap hashMap = this._$_findViewCache;</span><br><span class="line">        if (hashMap != null) &#123;</span><br><span class="line">            hashMap.clear();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public View _$_findCachedViewById(int i) &#123;</span><br><span class="line">        if (this._$_findViewCache == null) &#123;</span><br><span class="line">            this._$_findViewCache = new HashMap();</span><br><span class="line">        &#125;</span><br><span class="line">        View view = (View) this._$_findViewCache.get(Integer.valueOf(i));</span><br><span class="line">        if (view != null) &#123;</span><br><span class="line">            return view;</span><br><span class="line">        &#125;</span><br><span class="line">        view = findViewById(i);</span><br><span class="line">        this._$_findViewCache.put(Integer.valueOf(i), view);</span><br><span class="line">        return view;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">        setContentView((int) R.layout.activity_main);</span><br><span class="line">        Button btn = findViewById(R.id.button);</span><br><span class="line">        Intrinsics.checkExpressionValueIsNotNull(btn, &quot;findViewById(R.id.button)&quot;);</span><br><span class="line">        btn.setOnClickListener(new MainActivity$onCreate$1(this));</span><br><span class="line">        View findViewById = findViewById(R.id.textView);</span><br><span class="line">        Intrinsics.checkExpressionValueIsNotNull(findViewById, &quot;findViewById(R.id.textView)&quot;);</span><br><span class="line">        this.diceImg = (ImageView) findViewById;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private final void rollDice() &#123;</span><br><span class="line">        int drawableResources;</span><br><span class="line">        switch (Random.Default.nextInt(6) + 1) &#123;</span><br><span class="line">            case 1:</span><br><span class="line">                drawableResources = R.drawable.dice_1;</span><br><span class="line">                break;</span><br><span class="line">            case 2:</span><br><span class="line">                drawableResources = R.drawable.dice_2;</span><br><span class="line">                break;</span><br><span class="line">            case 3:</span><br><span class="line">                drawableResources = R.drawable.dice_3;</span><br><span class="line">                break;</span><br><span class="line">            case 4:</span><br><span class="line">                drawableResources = R.drawable.dice_4;</span><br><span class="line">                break;</span><br><span class="line">            case 5:</span><br><span class="line">                drawableResources = R.drawable.dice_5;</span><br><span class="line">                break;</span><br><span class="line">            case 6:</span><br><span class="line">                drawableResources = R.drawable.dice_6;</span><br><span class="line">                break;</span><br><span class="line">            default:</span><br><span class="line">                drawableResources = R.drawable.empty_dice;</span><br><span class="line">                break;</span><br><span class="line">        &#125;</span><br><span class="line">        ImageView imageView = this.diceImg;</span><br><span class="line">        if (imageView == null) &#123;</span><br><span class="line">            Intrinsics.throwUninitializedPropertyAccessException(&quot;diceImg&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        imageView.setImageResource(drawableResources);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">//난독화 후</span><br><span class="line">package com.example.udacity_diceroller;</span><br><span class="line"></span><br><span class="line">import a.a.k.d;</span><br><span class="line">import android.os.Bundle;</span><br><span class="line">import android.view.View;</span><br><span class="line">import android.view.View.OnClickListener;</span><br><span class="line">import android.widget.Button;</span><br><span class="line">import android.widget.ImageView;</span><br><span class="line">import b.d.a.b;</span><br><span class="line">import b.e.c;</span><br><span class="line"></span><br><span class="line">public final class MainActivity extends d &#123;</span><br><span class="line">    public ImageView p;</span><br><span class="line"></span><br><span class="line">    public static final class a implements OnClickListener &#123;</span><br><span class="line">        public final /* synthetic */ MainActivity b;</span><br><span class="line"></span><br><span class="line">        public a(MainActivity mainActivity) &#123;</span><br><span class="line">            this.b = mainActivity;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public final void onClick(View it) &#123;</span><br><span class="line">            this.b.a();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">        setContentView((int) R.layout.activity_main);</span><br><span class="line">        Object btn = findViewById(R.id.button);</span><br><span class="line">        b.a(btn, &quot;findViewById(R.id.button)&quot;);</span><br><span class="line">        ((Button) btn).setOnClickListener(new a(this));</span><br><span class="line">        Object findViewById = findViewById(R.id.textView);</span><br><span class="line">        b.a(findViewById, &quot;findViewById(R.id.textView)&quot;);</span><br><span class="line">        this.p = (ImageView) findViewById;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /* renamed from: o */</span><br><span class="line">    public final void a() &#123;</span><br><span class="line">        int drawableResources;</span><br><span class="line">        switch (c.b.b(6) + 1) &#123;</span><br><span class="line">            case 1:</span><br><span class="line">                drawableResources = R.drawable.dice_1;</span><br><span class="line">                break;</span><br><span class="line">            case 2:</span><br><span class="line">                drawableResources = R.drawable.dice_2;</span><br><span class="line">                break;</span><br><span class="line">            case 3:</span><br><span class="line">                drawableResources = R.drawable.dice_3;</span><br><span class="line">                break;</span><br><span class="line">            case 4:</span><br><span class="line">                drawableResources = R.drawable.dice_4;</span><br><span class="line">                break;</span><br><span class="line">            case 5:</span><br><span class="line">                drawableResources = R.drawable.dice_5;</span><br><span class="line">                break;</span><br><span class="line">            case 6:</span><br><span class="line">                drawableResources = R.drawable.dice_6;</span><br><span class="line">                break;</span><br><span class="line">            default:</span><br><span class="line">                drawableResources = R.drawable.empty_dice;</span><br><span class="line">                break;</span><br><span class="line">        &#125;</span><br><span class="line">        ImageView imageView = this.p;</span><br><span class="line">        if (imageView != null) &#123;</span><br><span class="line">            imageView.setImageResource(drawableResources);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            b.c(&quot;diceImg&quot;);</span><br><span class="line">            throw null;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>비록 간단한 구조이지만 분명 쉽게 알아보기 힘든 a, p 등의 알파벳이 눈에 보인다. 만약 viewbinding 을 사용하고 string 으로 하드코딩하지 않고 상수로 처리한다면 난독화의 정도는 더욱 심해져서 읽기 어려울 것이다!!!<br><br></p><h4 id="decompile-도구-참고"><a href="#decompile-도구-참고" class="headerlink" title="decompile 도구 참고!"></a>decompile 도구 참고!</h4><ul><li><a href="https://codechacha.com/ko/how-to-decompile-android-apk/" target="_blank" rel="noopener">참고 링크 클릭!</a></li><li>불편하지만 단계별 변환 가능한 방법  <ul><li>Apktool : apk의 리소스를 변환 </li><li>dex2jar : dex를 jar 로 변환</li><li>jd-cmd : jar를 java 코드로 변환하는데 사용함 </li></ul></li><li>편한 방법<ul><li>jadx : apk 를 decompile 함<br><br><br></li></ul></li></ul><h2 id="mapping-txt-에서-내-프로젝트의-class-method가-난독화-된-새로운-이름을-확인하기"><a href="#mapping-txt-에서-내-프로젝트의-class-method가-난독화-된-새로운-이름을-확인하기" class="headerlink" title="mapping.txt 에서 내 프로젝트의 class, method가 난독화 된 새로운 이름을 확인하기"></a>mapping.txt 에서 내 프로젝트의 class, method가 난독화 된 새로운 이름을 확인하기</h2><p>간단하게 R8을 통해 코드 난독화를 해보았다. 그렇다면 이 난독화된 class, method 들은 어떻게 확인할 수 있을까? 그것은 decompile 할 필요도 없이 파일 하나만 간단히 확인해보면 된다. 안드로이드 공식문서에 따르면, 안드로이드 apk가 만들어질 때에 R8 컴파일러는 매번 새로운 mapping.txt 파일을 생성한다. 이 텍스트 파일 내에 난독화된 클래스, 매서드 및 필드가 어떤 약자, 알파벳으로 매핑되어있는지 그 목록이 자세하게 적혀있다. </p><p>예를들면 다음과 같이. </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">//</span><br><span class="line"># compiler: R8</span><br><span class="line">androidx.appcompat.app.ActionBar -&gt; a.a.k.a:</span><br><span class="line">    92:1368:void &lt;init&gt;() -&gt; &lt;init&gt;</span><br><span class="line">    void dispatchMenuVisibilityChanged(boolean) -&gt; a</span><br><span class="line">    void onConfigurationChanged(android.content.res.Configuration) -&gt; a</span><br><span class="line">    boolean onKeyShortcut(int,android.view.KeyEvent) -&gt; a</span><br><span class="line">    void setWindowTitle(java.lang.CharSequence) -&gt; a</span><br><span class="line">    androidx.appcompat.view.ActionMode startActionMode(androidx.appcompat.view.ActionMode$Callback) -&gt; a</span><br><span class="line">    1074:1074:boolean closeOptionsMenu() -&gt; a</span><br><span class="line">    boolean collapseActionView() -&gt; b</span><br><span class="line">    void setDefaultDisplayHomeAsUpEnabled(boolean) -&gt; b</span><br><span class="line">    int getDisplayOptions() -&gt; c</span><br><span class="line">    void setShowHideAnimationEnabled(boolean) -&gt; c</span><br><span class="line">    android.content.Context getThemedContext() -&gt; d</span><br><span class="line">    1080:1080:boolean invalidateOptionsMenu() -&gt; e</span><br><span class="line">    1121:1121:void onDestroy() -&gt; f</span><br><span class="line">    1086:1086:boolean onMenuKeyEvent(android.view.KeyEvent) -&gt; g</span><br><span class="line">    1068:1068:boolean openOptionsMenu() -&gt; h</span><br></pre></td></tr></table></figure><p>해당 파일은 ‘app/build/outputs/mapping/<build-type>/‘ 에 저장되므로 직접 확인해보면 된다. </build-type></p><p>오늘도 큰 공부 하고 갑니다, 에러님…!<br><br><br><br></p><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://developer.android.com/studio/build/shrink-code" target="_blank" rel="noopener">Android Developers - 앱 축소, 난독 화 및 최적화</a></li><li><a href="https://eunplay.tistory.com/144" target="_blank" rel="noopener">proguard 사용시 파일 목록과 내용에 대한 설명이 있는 블로그</a></li><li><a href="https://medium.com/mo-mu/%EC%95%88%EB%93%9C%EB%A1%9C%EC%9D%B4%EB%93%9C-%EC%95%B1-apk-%EB%94%94%EC%BB%B4%ED%8C%8C%EC%9D%BC%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95-ca1e543aa944#.s6zxf2qdu" target="_blank" rel="noopener">안드로이드 앱(apk) 디컴파일하는 방법!</a></li><li><a href="https://www.guardsquare.com/en/products/proguard/manual/usage" target="_blank" rel="noopener">proguard 규칙 공식문서</a></li><li><a href="https://dwfox.tistory.com/18" target="_blank" rel="noopener">[Android] ProGuard 코드 난독화 / 최적화 설정 - Android Stuido</a></li><li>개발자 신현식님의 <a href="https://medium.com/mo-mu/%EC%95%88%EB%93%9C%EB%A1%9C%EC%9D%B4%EB%93%9C-%EC%95%B1-apk-%EB%94%94%EC%BB%B4%ED%8C%8C%EC%9D%BC%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95-ca1e543aa944#.s6zxf2qdu" target="_blank" rel="noopener">안드로이드 앱(apk) 디컴파일하는 방법!</a></li></ul>]]></content:encoded>
      
      <comments>https://miniminis.github.io/2020/03/02/android-proguard/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Express framework 이용해서 실시간 SNS 만들기 (3)</title>
      <link>https://miniminis.github.io/2019/10/27/node-express-framework-03/</link>
      <guid>https://miniminis.github.io/2019/10/27/node-express-framework-03/</guid>
      <pubDate>Sun, 27 Oct 2019 14:20:31 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;&lt;a href=&quot;https://miniminis.github.io/2019/10/27/node-express-framework-02/&quot;&gt;Express framework 이용해서 실시간 SNS 만들기 (2)&lt;/a&gt;편에 이은 세 번째 포스팅입니다. 
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p><a href="https://miniminis.github.io/2019/10/27/node-express-framework-02/">Express framework 이용해서 실시간 SNS 만들기 (2)</a>편에 이은 세 번째 포스팅입니다. 자세한 코드 및 내용은 아래의 참고 링크를 확인 부탁드립니다!<br><br><br></p><h2 id="Multer-모듈로-이미지-업로드-기능-구현"><a href="#Multer-모듈로-이미지-업로드-기능-구현" class="headerlink" title="Multer 모듈로 이미지 업로드 기능 구현"></a>Multer 모듈로 이미지 업로드 기능 구현</h2><p>보통 이미지와 함께 처리되는 form 의 경우는 multipart/form-data 타입을 띄는 경우가 많다. npm 에서 제공해주는 multer 모듈로 multipart 형태의 폼 데이터를 효과적으로 처리해보자.<br><br><br></p><h4 id="1-npm-i-multer-명령어로-설치"><a href="#1-npm-i-multer-명령어로-설치" class="headerlink" title="1. npm i multer 명령어로 설치"></a>1. <code>npm i multer</code> 명령어로 설치</h4><h4 id="2-routes-post-js-에서-게시글-흐름-처리-주석참조"><a href="#2-routes-post-js-에서-게시글-흐름-처리-주석참조" class="headerlink" title="2. routes/post.js 에서 게시글 흐름 처리 : 주석참조"></a>2. routes/post.js 에서 게시글 흐름 처리 : 주석참조</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">//이미지 서버에 저장, 게시글 저장 시에는 이미지 주소만 저장 </span><br><span class="line">//클라이언트에는 사진 주소를 통해 view 처리 </span><br><span class="line"></span><br><span class="line">const express = require(&apos;express&apos;);</span><br><span class="line">const multer = require(&apos;multer&apos;);   //multipart 데이터 업로드 시 필요한 미들웨어 같은 역할 </span><br><span class="line">const path = require(&apos;path&apos;);</span><br><span class="line">const fs = require(&apos;fs&apos;);</span><br><span class="line"></span><br><span class="line">//라우터에 필요한 모듈들 로드  </span><br><span class="line">const &#123; Post, Hashtag, User &#125; = require(&apos;../models&apos;);</span><br><span class="line">const &#123; isLoggedIn &#125; = require(&apos;./middlewares&apos;);</span><br><span class="line"></span><br><span class="line">//router 객체 생성 </span><br><span class="line">const router = express.Router();</span><br><span class="line"></span><br><span class="line">//1. 업로드 된 이미지 파일 전송받기 </span><br><span class="line">//2. post : 이미지 </span><br><span class="line">//3. post : 이미지 제외한 form data --&gt; DB 저장</span><br><span class="line"></span><br><span class="line">//1. 파일읽고 전송받기</span><br><span class="line">//파일 전송받을 디렉토리 생성  </span><br><span class="line">fs.readdir(&apos;uploads&apos;, (error)=&gt; &#123;</span><br><span class="line">    if(error) &#123;</span><br><span class="line">        console.error(&apos;uploads 폴더가 없으므로 하나 생성합니다. &apos;);</span><br><span class="line">        fs.mkdirSync(&apos;uploads&apos;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//파일 전송 시 설정 multer 에 해주기 </span><br><span class="line">const upload = multer(&#123;</span><br><span class="line">    //저장소 관련 설정 </span><br><span class="line">    storage : multer.diskStorage(&#123;</span><br><span class="line">        //파일 저장 경로 설정 </span><br><span class="line">        destination(req, file, cb) &#123;</span><br><span class="line">            cb(null, &apos;uploads/&apos;);</span><br><span class="line">        &#125;,</span><br><span class="line">        //파일 이름 설정 </span><br><span class="line">        filename(req, file, cb) &#123;</span><br><span class="line">            const ext = path.extname(file.originalname); //원본 파일의 확장자 추출 .js or .html 등 </span><br><span class="line">            //원본파일이름 + </span><br><span class="line">            cb(null, path.basename(file.originalname, ext) + Date.now() + ext);   //확장자 없엔 원본파일 이름 + 날짜+확장자</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;),</span><br><span class="line">    //파일 크기 제한 </span><br><span class="line">    limits : &#123; fileSize : 5* 1024 * 1024 &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//이미지 파일 먼저 post 처리 --&gt; 이미지 저장경로 form 에 response </span><br><span class="line">router.post(&apos;/img&apos;, isLoggedIn, upload.single(&apos;img&apos;), (req, res) =&gt; &#123;</span><br><span class="line">    console.log(req.file);</span><br><span class="line">    res.json(&#123; url : `/img/$&#123;req.file.filename&#125;` &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//이미지 이외의 form data post 처리 --&gt; DB에 저장 </span><br><span class="line">const upload2 = multer();</span><br><span class="line">router.post(&apos;/&apos;, isLoggedIn, upload2.none(), async(req, res, next) =&gt; &#123;</span><br><span class="line">  try &#123;</span><br><span class="line">    const post = await Post.create(&#123;</span><br><span class="line">        content : req.body.content,</span><br><span class="line">        img : req.body.url,</span><br><span class="line">        userId : req.user.id,</span><br><span class="line">    &#125;);</span><br><span class="line">    const hashtags = req.body.content.match(/#[^\s]*/g);</span><br><span class="line">    if(hashtags) &#123;</span><br><span class="line">        const result = await Promise.all(hashtags.map(tag =&gt; Hashtag.findOrCreate(&#123;</span><br><span class="line">            where : &#123; title : tag.slice(1).toLowerCase() &#125;,</span><br><span class="line">        &#125;)));</span><br><span class="line">        await post.addHashtags(result.map(r =&gt; r[0]));</span><br><span class="line">    &#125;</span><br><span class="line">    res.redirect(&apos;/&apos;);</span><br><span class="line">  &#125; catch (error) &#123;</span><br><span class="line">    console.log(error);</span><br><span class="line">    next(error);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">module.exports = router;</span><br></pre></td></tr></table></figure><p><br><br></p><h4 id="3-메인-페이지-로드-시-게시글도-같이-로드-될-수-있도록-routes-page-js-수정"><a href="#3-메인-페이지-로드-시-게시글도-같이-로드-될-수-있도록-routes-page-js-수정" class="headerlink" title="3. 메인 페이지 로드 시 게시글도 같이 로드 될 수 있도록 routes/page.js 수정"></a>3. 메인 페이지 로드 시 게시글도 같이 로드 될 수 있도록 routes/page.js 수정</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">router.get(&apos;/&apos;, (req, res, next)=&gt;&#123;</span><br><span class="line">    Post.findAll(&#123;</span><br><span class="line">        include : &#123;</span><br><span class="line">            model : User,</span><br><span class="line">            attributes : [&apos;id&apos;, &apos;nick&apos;], //User table 에서 id와 nick 가져오기 </span><br><span class="line">        &#125;,</span><br><span class="line">        order : [[&apos;createdAt&apos;, &apos;DESC&apos;]], //내림차순으로 정렬 </span><br><span class="line">    &#125;)</span><br><span class="line">    .then((posts) =&gt; &#123;</span><br><span class="line">        res.render(&apos;main&apos;, &#123;</span><br><span class="line">            title : &apos;NodeBird&apos;,</span><br><span class="line">            twits : posts,</span><br><span class="line">            user : req.user,</span><br><span class="line">            loginError : req.flash(&apos;login error 발생하였습니다!&apos;), //error message</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch((error)=&gt; &#123;</span><br><span class="line">        console.error(&apos;error 발생!&apos;);</span><br><span class="line">        next(error);</span><br><span class="line">    &#125;); </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><br><br></p><h2 id="마무으리"><a href="#마무으리" class="headerlink" title="마무으리"></a>마무으리</h2><h4 id="1-routes-post-js-에-해시태그-검색기능-추가"><a href="#1-routes-post-js-에-해시태그-검색기능-추가" class="headerlink" title="1. routes/post.js 에 해시태그 검색기능 추가"></a>1. routes/post.js 에 해시태그 검색기능 추가</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">//hashtag 흐름 처리 </span><br><span class="line">router.post(&apos;/hashtag&apos;, async(req, res, next) =&gt; &#123;</span><br><span class="line">    const query = req.query.hashtag;    //쿼리 스트링으로 해시태그의 이름을 받고 </span><br><span class="line">    if(!query) &#123;    //해시 태그가 빈 문자열일 경우 : </span><br><span class="line">        return res.redirect(&apos;/&apos;);   //메인페이지 redirect 처리 </span><br><span class="line">    &#125;</span><br><span class="line">    try &#123;</span><br><span class="line">        //DB에서 해시 태그 존재하는지 검색 후 </span><br><span class="line">        const hashtag = await Hashtag.findOne(&#123; where : &#123; title : query &#125; &#125;);</span><br><span class="line">        let posts = [];</span><br><span class="line">        if(hashtag) &#123;</span><br><span class="line">            //sequelize 의 getPosts([&#123;조건&#125;]) 를 통해서 조건에 맞는 모든 글을 가져온다. </span><br><span class="line">            posts = await hashtag.getPosts(&#123; include : [&#123; model : User &#125;] &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        return res.render(&apos;main&apos;, &#123;</span><br><span class="line">            title : `$&#123;query&#125; | NodeBird`,</span><br><span class="line">            user : req.user,</span><br><span class="line">            twits : posts, //조회된 글만 twits 에 넣어서 main 페이지로 렌더링 </span><br><span class="line">        &#125;);</span><br><span class="line">    &#125; catch (error) &#123;</span><br><span class="line">        console.log(error);</span><br><span class="line">        return next(error);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><br><br></p><h4 id="2-팔로잉-기능-추가"><a href="#2-팔로잉-기능-추가" class="headerlink" title="2. 팔로잉 기능 추가"></a>2. 팔로잉 기능 추가</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">//routes/user.js</span><br><span class="line">// 다른 사용자를 follow 할 수 있는 라우터 </span><br><span class="line">const express = require(&apos;express&apos;);</span><br><span class="line"></span><br><span class="line">const &#123; isLoggedIn &#125; = require(&apos;./middlewares&apos;);</span><br><span class="line">const &#123; User &#125; = require(&apos;../models&apos;);</span><br><span class="line"></span><br><span class="line">const router = express.Router();</span><br><span class="line"></span><br><span class="line">router.post(&apos;/:id/follow&apos;, isLoggedIn, async(req, res, next) =&gt; &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        const user = await User.findOne(&#123; where : &#123; id : req.user.id &#125;&#125;);</span><br><span class="line">        await user.addFollowing(parseInt(req.params.id, 10)); //req.params.id = :id</span><br><span class="line">        res.send(&apos;success&apos;);</span><br><span class="line">    &#125; catch (error) &#123;</span><br><span class="line">        console.log(error);</span><br><span class="line">        next(error);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">module.exports = router;</span><br></pre></td></tr></table></figure><p><br><br></p><h4 id="3-follower-기능이-생김에-따라-req-user-객체에-follwers-목록과-followings-목록을-같이-조회할-수-있도록-deserializeUser-수정한다"><a href="#3-follower-기능이-생김에-따라-req-user-객체에-follwers-목록과-followings-목록을-같이-조회할-수-있도록-deserializeUser-수정한다" class="headerlink" title="3. follower 기능이 생김에 따라 req.user 객체에 follwers 목록과 followings 목록을 같이 조회할 수 있도록 deserializeUser 수정한다."></a>3. follower 기능이 생김에 따라 req.user 객체에 follwers 목록과 followings 목록을 같이 조회할 수 있도록 deserializeUser 수정한다.</h4><h4 id="4-app-js에-라우터를-연결한다"><a href="#4-app-js에-라우터를-연결한다" class="headerlink" title="4. app.js에 라우터를 연결한다."></a>4. app.js에 라우터를 연결한다.</h4><p><br><br></p><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="http://www.yes24.com/Product/Goods/62597864?Acode=101" target="_blank" rel="noopener">조현영 개발자님의 Node.js 교과서</a></li><li><a href="https://github.com/ZeroCho/nodejs-book" target="_blank" rel="noopener">Node.js 교과서 예제코드 Git 주소</a></li><li><a href="https://github.com/Miniminis/nodeJS-study-note/tree/master/nodebird" target="_blank" rel="noopener">나의 소스 코드 : 책을 따라하며 발생했던 에러 해결</a></li></ul>]]></content:encoded>
      
      <comments>https://miniminis.github.io/2019/10/27/node-express-framework-03/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Express framework 이용해서 실시간 SNS 만들기 (2)</title>
      <link>https://miniminis.github.io/2019/10/27/node-express-framework-02/</link>
      <guid>https://miniminis.github.io/2019/10/27/node-express-framework-02/</guid>
      <pubDate>Sun, 27 Oct 2019 14:20:25 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;&lt;a href=&quot;https://miniminis.github.io/2019/10/27/node-express-framework-01/&quot;&gt;Express framework 이용해서 실시간 SNS 만들기 (1)&lt;/a&gt;편에 이은 두 번째 포스팅입니다. 
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p><a href="https://miniminis.github.io/2019/10/27/node-express-framework-01/">Express framework 이용해서 실시간 SNS 만들기 (1)</a>편에 이은 두 번째 포스팅입니다. 자세한 코드 및 내용은 아래의 참고 링크를 확인 부탁드립니다!<br><br><br></p><h2 id="Passport-모듈로-로그인-구현하기"><a href="#Passport-모듈로-로그인-구현하기" class="headerlink" title="Passport 모듈로 로그인 구현하기"></a>Passport 모듈로 로그인 구현하기</h2><h4 id="passport-관련-패키지-설치"><a href="#passport-관련-패키지-설치" class="headerlink" title="passport 관련 패키지 설치"></a>passport 관련 패키지 설치</h4><p><code>npm i</code> + </p><ol><li>passport </li><li>passport-local : sns 서비스 통해 로그인하지 않고 로컬에서 회원가입-로그인 절차를 밟기 위해 필요</li><li>passport-kakao</li><li>bcypt<br><br><br></li></ol><h4 id="app-js와-연결"><a href="#app-js와-연결" class="headerlink" title="app.js와 연결!"></a>app.js와 연결!</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">//app.js</span><br><span class="line">const passport = require(&apos;passport&apos;);   //1. passport 모듈 로드 </span><br><span class="line"></span><br><span class="line">const pageRouter = require(&apos;./routes/page&apos;);</span><br><span class="line">const passportConfig = require(&apos;./passport&apos;);    //2. passport 모듈 연결 01 : ./passport/index.js 의 생략 </span><br><span class="line"></span><br><span class="line">const app = express();</span><br><span class="line">passportConfig(passport); // 3. passport 모듈 연결 02</span><br><span class="line"></span><br><span class="line">app.use(flash()); </span><br><span class="line">app.use(passport.initialize()); //4. passport 모듈 연결03</span><br><span class="line">//req 요청에 passport 설정을 심음 </span><br><span class="line">app.use(passport.session());    //5. passport 모듈 연결04</span><br><span class="line">//req.session 객체에 passport 정보를 저장 </span><br><span class="line">//req.session 객체가 express-session 에서 생성하는 것이므로 express-session 뒤에 연결해야함</span><br></pre></td></tr></table></figure><p><br><br></p><h4 id="passport-index-js-작성"><a href="#passport-index-js-작성" class="headerlink" title="passport/index.js 작성"></a>passport/index.js 작성</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">//passport/index.js</span><br><span class="line">const local = require(&apos;./localStrategy&apos;);</span><br><span class="line">const kakao = require(&apos;./kakaoStrategy&apos;);</span><br><span class="line">const &#123; User &#125; = require(&apos;../models&apos;);</span><br><span class="line"></span><br><span class="line">module.exports = (passport) =&gt; &#123;</span><br><span class="line"></span><br><span class="line">    //req.session 개체에 어떤 데이터를 저장할지 선택. </span><br><span class="line">    //done(에러발생시 사용할 것, user의 id만 저장하여 용량절약)</span><br><span class="line">    passport.serializeUser((user, done) =&gt; &#123;</span><br><span class="line">        done(null, user.id); //첫번째인자 : 에러시 사용, 두번째 인자: 저장할 항목 - id 만 저장</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    //매 요청시 passport.session() 에 의해 실행됨.</span><br><span class="line">    //serializeUser 에서 세션에 저장한 user id 를 받아서 데이터 베이스에서 사용자 정보를 조회함. </span><br><span class="line">    //req.user 에 조회한 정보를 저장 --&gt; 이후에도 이를 통해 사용자 정보 받아올 수 있음 </span><br><span class="line">    passport.deserializeUser((id, done)=&gt; &#123;</span><br><span class="line">        User.findOne(&#123; </span><br><span class="line">            where : &#123; id &#125; &#125;) //세션에 저장된 아이디로 사용자 정보 조회 </span><br><span class="line">            .then(user =&gt; done(null, user))</span><br><span class="line">            .catch(err =&gt; done(err));</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    local(passport);</span><br><span class="line">    kakao(passport);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>serializeUser</code> 통해서 사용자의 정보 객체를 세션에 저장,<br><code>deserializeUser</code>를 통해서 세션에 있는 사용자의 id통해서 사용자의 정보 객체를 조회하는 과정임!<br><br><br></p><h4 id="로그인-요청-시-passport-모듈-동작-과정"><a href="#로그인-요청-시-passport-모듈-동작-과정" class="headerlink" title="로그인 요청 시 passport 모듈 동작 과정"></a>로그인 요청 시 passport 모듈 동작 과정</h4><ol><li>로그인 요청 </li><li>passport내부에 내장되어있는 authenticate 매서드 호출 </li><li>요청에 따라 로그인 전략 수행 : local or kakao </li><li>로그인 성공 시 : 사용자 객체 + req.login() 가 호출됨 </li><li>req.login() 가 passport.serializeUser() 호출 </li><li>req.session 에는 사용자 아이디만 저장된다. </li><li>로그인 과정 완료<br><br><br></li></ol><h4 id="로그인-이후-passport-모듈-동작-과정"><a href="#로그인-이후-passport-모듈-동작-과정" class="headerlink" title="로그인 이후 passport 모듈 동작 과정"></a>로그인 이후 passport 모듈 동작 과정</h4><ol><li>매 요청시마다 passport.sesseion() 미들웨어에서 passport.deserializeUser 를 호출하게 된다. </li><li>req.session 에 저장된 사용자 id 를 통해서 DB에서 사용자 정보 조회 </li><li>조회된 사용자 정보를 User 객체에 저장 </li><li>라우터에서 req.user 통해서 객체 접근 가능하게 됨<br><br><br></li></ol><h4 id="로컬-로그인-구현하기"><a href="#로컬-로그인-구현하기" class="headerlink" title="로컬 로그인 구현하기"></a>로컬 로그인 구현하기</h4><h6 id="1-각-라우터에-접근할-수-있는-접근권한-미들웨어-만들기"><a href="#1-각-라우터에-접근할-수-있는-접근권한-미들웨어-만들기" class="headerlink" title="1. 각 라우터에 접근할 수 있는 접근권한 미들웨어 만들기"></a>1. 각 라우터에 접근할 수 있는 접근권한 미들웨어 만들기</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">//routes/middlewares.js</span><br><span class="line">//로그아웃, 이미지 업로더, 마이페이지 등 페이지 접근 </span><br><span class="line">exports.isLoggedIn = (req, res, next) =&gt; &#123;</span><br><span class="line">    if(req.isAuthenticated()) &#123;</span><br><span class="line">        next();</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        res.status(403).send(&apos;로그인 필요!&apos;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">//회원가입, 로그인 라우터 접근 </span><br><span class="line">exports.isNotLoggedIn = (req, res, next) =&gt; &#123;</span><br><span class="line">    if(!req.isAuthenticated()) &#123;</span><br><span class="line">        next();</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        res.redirect(&apos;/&apos;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>passport 모듈은 req 내부에 isAuthenticated 매서드를 자동으로 추가한다고 한다. 로그인여부를 확인하는 <code>isLoggedIn</code>의 경우는 접근 권한이 확인이 되면 next() 를 통해서 다음 미들웨어가 실행될 수 있도록 했고, 권한확인에 실패하면 에러메시지를 띄우게 처리했다. 반면에 로그인이 안된 상태여야하는 <code>isNotLoggedIn</code> 의 경우에는 권한이 없어야 next() 를 통해서 다음 미들웨어가 실행되도록 했고, 권한이 존재한다면 그냥 메인 페이지로 redirect 처리해버렸다. </p><ul><li>isLoggedIn 같은 경우는 로그인이 되어 있어야 접근할 수 있는 마이페이지, 로그아웃 등에 쓰일 수 있고 </li><li>isNotLoggedIn 같은 경우는 로그인 되어있지 않은 상태여야 접근 가능한 회원가입 등의 페이지에 쓰일 수 있겠다. </li></ul><p>두 매서드는 페이지 분기처리를 하는 곳에서 유용하게 쓰일 수 있다. </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">//routes/page.js</span><br><span class="line">const express = require(&apos;express&apos;);</span><br><span class="line">const &#123; isLoggedIn, isNotLoggedIn &#125; = require(&apos;./middlewares&apos;);</span><br><span class="line"></span><br><span class="line">const router = express.Router();</span><br><span class="line"></span><br><span class="line">router.get(&apos;/profile&apos;, isLoggedIn, (req, res)=&gt;&#123;</span><br><span class="line">    res.render(&apos;profile&apos;, &#123;title : &apos;내정보 | NodeBird&apos;, user : req.user&#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">router.get(&apos;/join&apos;, isNotLoggedIn, (req, res)=&gt;&#123;</span><br><span class="line">    res.render(&apos;join&apos;, &#123;</span><br><span class="line">        title : &apos;회원가입 - NodeBird&apos;,</span><br><span class="line">        user : req.user,</span><br><span class="line">        joinError : req.flash(&apos;joinError&apos;), //에러메시지</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>위에서 설명한 것처럼, profile 페이지에는 로그인 매서드를 거쳐 신원확인이 되어야 res.render 미들웨어로 넘어갈 수 있다. join 회원가입 페이지의 경우에는 로그인이 되어있지 않다는 것이 확인이 되어야 접근할 수 있다.<br><br></p><p>이 같은 접근권한 확인용 미들웨어는 관리자 여부나 팔로잉 여부와 같이 다양한 확인 절차에 쓰일 수 있다고 하니 나중에 기능들을 추가하며 더 발전시켜도 좋을 것 같다. </p><h6 id="2-회원가입-로그인-로그아웃-라우터-작성-설명은-주석-참조"><a href="#2-회원가입-로그인-로그아웃-라우터-작성-설명은-주석-참조" class="headerlink" title="2. 회원가입, 로그인, 로그아웃 라우터 작성 (설명은 주석 참조)"></a>2. 회원가입, 로그인, 로그아웃 라우터 작성 (설명은 주석 참조)</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">//routes.auth.js</span><br><span class="line">const express = require(&apos;express&apos;);</span><br><span class="line">const passport = require(&apos;passport&apos;);</span><br><span class="line">const bcrypt = require(&apos;bcrypt&apos;);</span><br><span class="line">const &#123; isLoggedIn, isNotLoggedIn &#125; = require(&apos;./middlewares&apos;);</span><br><span class="line">const &#123; User &#125; = require(&apos;../models&apos;);</span><br><span class="line"></span><br><span class="line">const router = express.Router();</span><br><span class="line"></span><br><span class="line">//회원가입 post 요청 </span><br><span class="line">router.post(&apos;/join&apos;, isNotLoggedIn, async (req, res, next) =&gt; &#123;</span><br><span class="line">    const &#123; email, nick, password &#125; = req.body;</span><br><span class="line">    try &#123;</span><br><span class="line">        //이미 DB에 존재하는 user 정보라면, redirect 처리 </span><br><span class="line">        const exUSer = await User.findOne(&#123; where : &#123; email &#125; &#125;);</span><br><span class="line">        if(exUSer) &#123;</span><br><span class="line">            req.flash(&apos;joinError&apos;, &apos;이미 가입된 이메일입니다.&apos;);</span><br><span class="line">            return res.redirect(&apos;/join&apos;);</span><br><span class="line">        &#125;</span><br><span class="line">        //위의 경우가 아니라면, 비밀번호 암호화 처리 후, 회원가입처리 bcrypt.hash(암호화할 대상, 암호화정도12+/~31); </span><br><span class="line">        const hash = await bcrypt.hash(password, 12);</span><br><span class="line">        await User.create(&#123;</span><br><span class="line">            email,</span><br><span class="line">            nick,</span><br><span class="line">            password : hash,</span><br><span class="line">        &#125;);</span><br><span class="line">        return res.redirect(&apos;/&apos;);</span><br><span class="line">    &#125; catch (error) &#123;</span><br><span class="line">        console.error(error);</span><br><span class="line">        return next(error);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//로그인 post 요청 </span><br><span class="line">router.post(&apos;/login&apos;, isNotLoggedIn, (req, res, next) =&gt; &#123;</span><br><span class="line">    //local login 시 </span><br><span class="line">    passport.authenticate(&apos;local&apos;, (authError, user, info) =&gt; &#123; // passport.authenticate(&apos;local&apos;) 로컬 로그인 전략 수행.</span><br><span class="line">        //로그인 실패 </span><br><span class="line">        if(authError) &#123; //authError 는 authenticate() 실패시에만 인자가 전달됨 </span><br><span class="line">            console.error(authError);</span><br><span class="line">            return next(authError);</span><br><span class="line">        &#125; </span><br><span class="line">        //DB에 일치하는 user 정보가 없는 경우 </span><br><span class="line">        if(!user) &#123;</span><br><span class="line">            req.flash(&apos;loginError&apos;, info.message);</span><br><span class="line">            return res.redirect(&apos;/&apos;);</span><br><span class="line">        &#125;</span><br><span class="line">        //마침내 login 성공한 경우 </span><br><span class="line">        //Passport 에 의해 req에 추가된 login() 매서드</span><br><span class="line">        return req.login(user, (loginError) =&gt; &#123;    //user 객체는 passport.serializeUser로 이동함 </span><br><span class="line">            if(loginError) &#123;</span><br><span class="line">                console.log(loginError);</span><br><span class="line">                return next(loginError);</span><br><span class="line">            &#125;</span><br><span class="line">            return res.redirect(&apos;/&apos;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;)(req, res, next); //미들웨어 안의 미들웨어에는 (req, res, next) 붙임 </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//로그아웃 get 요청 </span><br><span class="line">router.get(&apos;/logout&apos;, isLoggedIn, (req, res)=&gt; &#123;</span><br><span class="line">    req.logout();   //Passport 에 의해 req에 추가된 logout() 매서드</span><br><span class="line">    req.session.destroy();  //현재 세션에 있는 사용자 정보 파괴 </span><br><span class="line">    res.redirect(&apos;/&apos;);  //메인 페이지로 리다이렉트 </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">router.get(&apos;/kakao&apos;, passport.authenticate(&apos;kakao&apos;));</span><br><span class="line"></span><br><span class="line">router.get(&apos;/kakao/callback&apos;, passport.authenticate(&apos;kakao&apos;, &#123;</span><br><span class="line">    failureRedirect : &apos;/&apos;,</span><br><span class="line">&#125;), (req, res) =&gt; &#123;</span><br><span class="line">    res.redirect(&apos;/&apos;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">module.exports = router;</span><br></pre></td></tr></table></figure><p>로그인 라우터부분 추가 설명 </p><ul><li>login post 요청 라우터 내부에 미들웨어가 있는 경우로, 끝부분에 (req, res, next)를 붙여준다. </li><li>passport 모듈은 req에 login() 과 logout() 메서드를 자동으로 추가함. </li><li>req.login() 호출되면 - passport.serializeUser() 호출됨 : 이때 user 객체가 매개변수로 전달됨<br><br><br></li></ul><h6 id="3-로컬-전략-작성"><a href="#3-로컬-전략-작성" class="headerlink" title="3. 로컬 전략 작성"></a>3. 로컬 전략 작성</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">//passport.localStrategy.js</span><br><span class="line">const LocalStrategy = require(&apos;passport-local&apos;).Strategy;</span><br><span class="line">const bcrypt = require(&apos;bcrypt&apos;);</span><br><span class="line"></span><br><span class="line">const &#123; User &#125; = require(&apos;../models&apos;);</span><br><span class="line"></span><br><span class="line">module.exports = (passport) =&gt; &#123;</span><br><span class="line">    passport.use(new LocalStrategy(&#123;</span><br><span class="line">        usernameField : &apos;email&apos;,    //pug form 에 있는 input 의 name과 일치시킴 : req.body.email</span><br><span class="line">        passwordField : &apos;password&apos;,  //pug form 에 있는 input 의 name과 일치시킴 : req.body.password</span><br><span class="line">    &#125;, async (email, password, done) =&gt; &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            const exUser = await User.findOne(&#123; where : &#123; email &#125; &#125;);</span><br><span class="line">            if(exUser) &#123;</span><br><span class="line">                const result = await bcrypt.compare(password, exUser.password);</span><br><span class="line">                if(result) &#123;</span><br><span class="line">                    done(null, exUser);</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    done (null, false, &#123; message : &apos;비밀번호가 일치하지 않습니다!&apos;&#125;);   //done(서버상 에러여부, false, 메시지)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                done (null, false, &#123;message : &apos;가입되지 않은 회원입니다!&apos;&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (error) &#123;</span><br><span class="line">            console.error(error);</span><br><span class="line">            done(error);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;));</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>로컬 로그인 전략의 경우 핵심은 2가지 이다. </p><ol><li><p>로그인 폼에서 받은 정보들을 LocalStrategy 객체와 잘 매칭시키고 </p></li><li><p>해당 정보를 이용해서 DB에 조회한 결과에 따라 4가지로 분기처리합니다. </p><ul><li><p>email + password와 일치하는 사용자가 존재 : </p><ul><li>done(null, exUser)</li><li>passport.authenticate(‘local’, (authError, user, info) =&gt; {}))</li><li>authError는 null, user는 exUser 객체가 전달됨 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//마침내 login 성공한 경우 </span><br><span class="line">//Passport 에 의해 req에 추가된 login() 매서드</span><br><span class="line">return req.login(user, (loginError) =&gt; &#123;    </span><br><span class="line">    if(loginError) &#123;</span><br><span class="line">        console.log(loginError);</span><br><span class="line">        return next(loginError);</span><br><span class="line">    &#125;</span><br><span class="line">    return res.redirect(&apos;/&apos;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul></li><li><p>password 가 틀렸을 경우 : </p><ul><li>done (null, false, { message : ‘비밀번호가 일치하지 않습니다!’}); </li><li>passport.authenticate(‘local’, (authError, user, info) =&gt; {}))</li><li>authError 에는 null값이, 하지만 정보가 일치하지 않으므로 false 가, 그리고 조회 결과에 대한 메시지가 info에 전달됩니다. <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//DB에 일치하는 user 정보가 없는 경우 </span><br><span class="line">if(!user) &#123;</span><br><span class="line">    req.flash(&apos;loginError&apos;, info.message);</span><br><span class="line">    return res.redirect(&apos;/&apos;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>아예 일치하는 사용자 정보가 없을 경우 : </p><ul><li>done (null, false, {message : ‘가입되지 않은 회원입니다!’});</li><li>passport.authenticate(‘local’, (authError, user, info) =&gt; {}))</li><li>authError 에는 null값이, 하지만 정보가 존재하지않으므로 false 가, 그리고 조회 결과에 대한 메시지가 info에 전달됩니다. <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//DB에 일치하는 user 정보가 없는 경우 </span><br><span class="line">if(!user) &#123;</span><br><span class="line">    req.flash(&apos;loginError&apos;, info.message);</span><br><span class="line">    return res.redirect(&apos;/&apos;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>서버 에러가 발생한 경우 : </p><ul><li>done(error);</li><li>passport.authenticate(‘local’, (authError, user, info) =&gt; {}))</li><li>authError 에 error 값이 들어가게 되어 미리 auth.js 에서 정의해둔 매서드가 실행된다.  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//로그인 실패 </span><br><span class="line">if(authError) &#123;</span><br><span class="line">    console.error(authError);</span><br><span class="line">    return next(authError);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ol><p><br><br></p><h4 id="카카오-로그인-구현하기-설명-주석참조"><a href="#카카오-로그인-구현하기-설명-주석참조" class="headerlink" title="카카오 로그인 구현하기 (설명 : 주석참조)"></a>카카오 로그인 구현하기 (설명 : 주석참조)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">//passport/kakaoStrategy.js</span><br><span class="line">//passport-kakao 모듈로부터 Strategy 생성자 불러와 사용</span><br><span class="line">const KakaoStrategy = require(&apos;passport-kakao&apos;).Strategy;</span><br><span class="line"></span><br><span class="line">//models 폴더로부터 User 객체 받아오기 </span><br><span class="line">const &#123; User &#125; = require(&apos;../models&apos;);</span><br><span class="line"></span><br><span class="line">//kakao() : module 만들기 </span><br><span class="line">module.exports = (passport) =&gt; &#123;</span><br><span class="line">    //미들웨어 설정 </span><br><span class="line">    passport.use(new KakaoStrategy(&#123;</span><br><span class="line">        clientID : process.env.KAKAO_ID,</span><br><span class="line">        callbackURL : &apos;/auth/kakao/callback&apos;,</span><br><span class="line">    &#125;, async (accessToken, refreshToken, profile, done) =&gt; &#123;    //카카오 인증 성공하면 callback : 3가지 정보 전달 </span><br><span class="line">        try &#123;</span><br><span class="line">            const exUser = await User.findOne(&#123; where : &#123; snsId: profile.id, provider: &apos;kakao&apos; &#125; &#125;);</span><br><span class="line">            if(exUser) &#123;</span><br><span class="line">                done(null, exUser);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                const newUser = await User.create(&#123;</span><br><span class="line">                    //profile 에 사용자 정보 담김 : 원하는 정보 꺼내와 회원가입하면 됨!</span><br><span class="line">                    email : profile._json &amp;&amp; profile._json.kaccount_email,</span><br><span class="line">                    nick : profile.displayName, </span><br><span class="line">                    snsId: profile.id,</span><br><span class="line">                    provier : &apos;kakao&apos;,</span><br><span class="line">                &#125;);</span><br><span class="line">                done(null, newUser); </span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (error) &#123;</span><br><span class="line">            console.error(error);</span><br><span class="line">            done(error);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;));</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>카카오 로그인 같은 경우는 따로 회원가입의 절차가 없다. 따라서 로그인을 할 때, 기존에 DB에 정보가 있는 사용자가 아니라면, 즉, 최초 로그인 회원이라면 회원가입(DB에 등록)도 같이 진행시켜줘야한다. 카카오 개발자 사이트에서 어플리케이션 등록을 하고 나서 진행하도록 한다. 관련 사항은 구글링! </p><ol><li><p>우선 passport-kakao 모듈에서 Strategy 생성자 불러오기 </p></li><li><p>kakao 개발자 계정에서 발급받은 clientID, callbackURL 설정. clientID 같은 경우는 CookieID 설정해주었을 때와 같이 <code>.env</code> 파일에 따로 관리하도록 한다. 외부 노출을 막기 위해서! </p></li><li><p>사용자 확인이 완료되면 callback 이 호출되고 accessToken, refreshToken, profile 세 가지의 변수에 정보가 담겨서 전달된다. </p></li><li><p>snsID 에 조회되는 사용자가 있다면, 사용자 객체를 반환, 존재하지 않다면 새로운 객체를 만들어주어 DB에 저장까지 하고 반환한다. </p></li><li><p>이미 가입된 경우, 새로 가입한 경우, 서버에러 등 세 가지의 상황에 따라 다른 done() 가 호출될 것이고, 각 경우에 맞게 passport.authenticate() 의 콜백함수가 실행될 것이다.</p></li><li><p>passport/auth.js 에 카카오 라우터 추가해주고 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">router.get(&apos;/kakao&apos;, passport.authenticate(&apos;kakao&apos;));</span><br><span class="line"></span><br><span class="line">router.get(&apos;/kakao/callback&apos;, passport.authenticate(&apos;kakao&apos;, &#123;</span><br><span class="line">    failureRedirect : &apos;/&apos;,</span><br><span class="line">&#125;), (req, res) =&gt; &#123;</span><br><span class="line">    res.redirect(&apos;/&apos;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>app.js 에도 연결하면 끝!<br><br><br></p></li></ol><p><a href="https://miniminis.github.io/2019/10/27/node-express-framework-03/">Express framework 이용해서 실시간 SNS 만들기 (3) 이어보기</a><br><br><br></p><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="http://www.yes24.com/Product/Goods/62597864?Acode=101" target="_blank" rel="noopener">조현영 개발자님의 Node.js 교과서</a></li><li><a href="https://github.com/ZeroCho/nodejs-book" target="_blank" rel="noopener">Node.js 교과서 예제코드 Git 주소</a></li><li><a href="https://github.com/Miniminis/nodeJS-study-note/tree/master/nodebird" target="_blank" rel="noopener">나의 소스 코드 : 책을 따라하며 발생했던 에러 해결</a></li></ul>]]></content:encoded>
      
      <comments>https://miniminis.github.io/2019/10/27/node-express-framework-02/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Express framework 이용해서 실시간 SNS 만들기 (1)</title>
      <link>https://miniminis.github.io/2019/10/27/node-express-framework-01/</link>
      <guid>https://miniminis.github.io/2019/10/27/node-express-framework-01/</guid>
      <pubDate>Sat, 26 Oct 2019 18:21:53 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;지난 연차 프로젝트에서 &lt;code&gt;node+socket.io&lt;/code&gt; 를 이용하여 탑승자와 운전자 실시간 데이터 통신 부분을 구현을 하고 나니 노드가 재밌다는 생각이 들었다. 그래서 조현영님의 &lt;a href=&quot;https://www.zeroch
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p>지난 연차 프로젝트에서 <code>node+socket.io</code> 를 이용하여 탑승자와 운전자 실시간 데이터 통신 부분을 구현을 하고 나니 노드가 재밌다는 생각이 들었다. 그래서 조현영님의 <a href="https://www.zerocho.com/" target="_blank" rel="noopener">블로그</a> 및 <a href="http://www.yes24.com/Product/Goods/62597864?Acode=101" target="_blank" rel="noopener">Node.js 교과서</a> 를 통해 node 를 조금씩 공부하는 중이다. 지난 주에는 express framework을 이용해서 <code>NodeBird</code> 라는 SNS 서비스를 만들어보았는데 나만의 서비스를 만들기 전에 그 과정을 한 번 복습하여 중요한 개념들을 다시 정리하고자 한다. 개인적인 공부의 기록이라, 실제로 프로젝트를 따라해보고 싶은 분들은 아래의 링크들을 타고 가보시는 것을 추천드린다.<br><br><br></p><h2 id="프로젝트-구조"><a href="#프로젝트-구조" class="headerlink" title="프로젝트 구조"></a>프로젝트 구조</h2><p>express framework 는 express generator 를 통해 자동으로 프로젝트를 생성해주어도 되지만, 이쪽에서는 직접 생성하도록 했다. 그 과정에서 express 구조를 한 번 더 복습할 수 있게 되었다.<br><br><br></p><h4 id="구조세팅"><a href="#구조세팅" class="headerlink" title="구조세팅"></a>구조세팅</h4><ol><li>가장 먼저 해야할 것 : package.json 생성 및 프로젝트 정보 입력<ul><li>npm init 통해서 생성 가능 </li><li>직접 파일 생성 해줘도 됨 </li><li>다른 항목들은 프로젝트의 취지에 맞게 자유롭게 작성해도 되지만, scripts의 start 부분은 꼭 반드시 작성해주어야 하는 것임. </li></ul></li><li>sequelize 를 통해서 데이터베이스 설정 <ul><li><code>npm i -g sequelize-cli</code> </li><li><code>npm i sequelize mysql2</code> : <code>node_modules</code>와 <code>package-lock.json</code> 생성됨 </li><li><code>sequelize init</code> : 시퀄라이즈의 시작. <code>config</code>, <code>migrations</code>, <code>models</code>, <code>seeders</code> 폴더가 자동 생성됨. </li></ul></li><li>필요한 폴더/파일 생성<ul><li>views : 템플릿 파일 </li><li>routes : 라우터 파일들</li><li>public : 정적파일 모음 </li><li>passport : passport 패키지 </li><li>app.js : 서버 코드 파일 <br></li></ul></li></ol><p>1-3번의 결과 생성되는 프로젝트의 구조는 다음과 같다. </p><ul><li>nodebird <ul><li>config</li><li>migrations</li><li>models</li><li>node_modules</li><li>passport</li><li>public</li><li>routes</li><li>seeders</li><li>views </li><li>app.js</li><li>package-lock.json</li><li>package.json<br><br><br></li></ul></li></ul><h4 id="필요한-npm-패키지-설치"><a href="#필요한-npm-패키지-설치" class="headerlink" title="필요한 npm 패키지 설치"></a>필요한 npm 패키지 설치</h4><p>npm i + </p><ol><li>express</li><li>cookie-parser</li><li>express-session </li><li>morgan</li><li>connect-flash</li><li>pug</li><li>nodemon : 서버 코드 수정시 서버를 자동시작해줌.<br> 설치 명령어는 <code>npm i -g nodemon</code> + <code>npm i -D nodemon</code>.<br><br><br></li></ol><h4 id="app-js-작성-설명은-주석-참조"><a href="#app-js-작성-설명은-주석-참조" class="headerlink" title="app.js 작성 : 설명은 주석 참조"></a>app.js 작성 : 설명은 주석 참조</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">//필요한 모듈들 로드 </span><br><span class="line">const express = require(&apos;express&apos;);</span><br><span class="line">const cookieParser = require(&apos;cookie-parser&apos;);</span><br><span class="line">const morgan = require(&apos;morgan&apos;);</span><br><span class="line">const path = require(&apos;path&apos;);</span><br><span class="line">const session = require(&apos;express-session&apos;);</span><br><span class="line">const flash = require(&apos;connect-flash&apos;);</span><br><span class="line">require(&apos;dotenv&apos;).config(); //env 따로 관리 </span><br><span class="line"></span><br><span class="line">//요청이 들어왔을때, 페이지 분기처리하는 라우터 등록 </span><br><span class="line">const pageRouter = require(&apos;./routes/page&apos;);</span><br><span class="line"></span><br><span class="line">//express app 생성 </span><br><span class="line">const app = express();</span><br><span class="line"></span><br><span class="line">//app 기본 설정 </span><br><span class="line">app.set(&apos;views&apos;, path.join(__dirname, &apos;views&apos;)); //모든 view 파일들은 views 이름의 폴더에 넣어준다. </span><br><span class="line">app.set(&apos;view engine&apos;, &apos;pug&apos;);  //view engine 은 pug를 사용 </span><br><span class="line">app.set(&apos;port&apos;, process.env.PORT || &apos;3000&apos;);    //process.env 객체에 PORT 속성이 있으면 그 값을 사용, 아니면 3000번 기본값을 사용 </span><br><span class="line"></span><br><span class="line">//사용할 미들웨어 설정 </span><br><span class="line">app.use(morgan(&apos;dev&apos;)); //요청에 대한 정보를 콘솔에 기록 </span><br><span class="line">app.use(express.static(path.join(__dirname, &apos;public&apos;))); //정적파일 저장위치 명시</span><br><span class="line">app.use(express.json()); //body-parser </span><br><span class="line">app.use(express.urlencoded(&#123;extended: false&#125;)); //body-parser </span><br><span class="line">app.use(cookieParser(process.env.COOKIE_SECRET)); //요청에 동봉된 쿠키를 해석. 매개변수 : 클라이언트에서 수정 막음 </span><br><span class="line">app.use(session(&#123;   //세션설정(for 로그인 등)</span><br><span class="line">    resave : false,</span><br><span class="line">    saveUninitialized : false,</span><br><span class="line">    secret : process.env.COOKIE_SECRET,</span><br><span class="line">    cookie : &#123;</span><br><span class="line">        httpOnly : true,</span><br><span class="line">        secure : false,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;));</span><br><span class="line">app.use(flash()); //일회성 메시지들을 웹 브라우저에 나타낼때 사용. </span><br><span class="line"></span><br><span class="line">app.use(&apos;/&apos;, pageRouter);</span><br><span class="line"></span><br><span class="line">//에러처리 미들웨어 404 </span><br><span class="line">app.use((req, res, next)=&gt; &#123;</span><br><span class="line">    const err = new Error(&apos;NOT FOUND&apos;);</span><br><span class="line">    err.status = 404;</span><br><span class="line">    next(err);</span><br><span class="line">&#125;); </span><br><span class="line"></span><br><span class="line">//에러 핸들링 미들웨어 </span><br><span class="line">app.use((err, req, res)=&gt; &#123;</span><br><span class="line">    res.locals.message = err.message;</span><br><span class="line">    res.locals.error = req.app.get(&apos;env&apos;) == &apos;development&apos; ? err : &#123;&#125;;</span><br><span class="line">    res.status(err.status || 500);</span><br><span class="line">    res.render(&apos;error&apos;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(app.get(&apos;port&apos;), ()=&gt;&#123;</span><br><span class="line">    console.log(app.get(&apos;port&apos;), &apos;번 포트에서 서버 연결!&apos;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><br><h4 id="dotenv-env-파일-생성"><a href="#dotenv-env-파일-생성" class="headerlink" title="dotenv + .env 파일 생성"></a>dotenv + <code>.env</code> 파일 생성</h4><p>cookieParser 나 express-session 의 비밀키들은 직접 코드 상에서 코딩할 경우에 소스 코드가 유출된다면 키도 같이 유출되므로 별도로 관리하는 것이 좋다. <code>.env</code> 라는 이름의 파일을 만들어서 그 안에 이제부터 비밀키를 관리/보관하는 것이 좋다. (<em>나는 이부분을 잘못이해해서 .env라는 확장자를 가진 파일을 생성했는데, 아무 확장자 없이 그냥 <code>.env</code>라는 파일을 하나 생성하는 것이었다…</em>)</p><ul><li>콘솔창에 : <code>npm i dotenv</code></li><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//.env 파일 안에 </span><br><span class="line">COOKIE_SECRET=nodebirdsecret</span><br></pre></td></tr></table></figure></li></ul><p>이렇게 해놓으면 dotenv 패키지를 통해 .env 파일 안에서 비밀키를 관리할 수 있고, 코딩을 할 때에는 그냥 <code>process.env</code> 를 통해 바로 비밀키에 접근할 수 있게 된다! </p><p>실제로 위의 app.js 파일을 보면 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">require(&apos;dotenv&apos;).config(); //env 따로 관리 </span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">app.use(cookieParser(process.env.COOKIE_SECRET));</span><br></pre></td></tr></table></figure><p>요런 코드가 보이는데 dotenv 모듈을 로드해주고, 그 dotenv 를 통해서 .env 파일에 접근하여 미리 등록한 비밀키를 사용하는 방법이다. 코드 상에서는 비밀키의 값을 알 수 없으므로 소스코드가 외부에 노출되어도 전혀 문제가 없다.<br><br><br></p><h4 id="기본적인-router-및-view-파일들-작성"><a href="#기본적인-router-및-view-파일들-작성" class="headerlink" title="기본적인 router 및 view 파일들 작성"></a>기본적인 router 및 view 파일들 작성</h4><ol><li>page.js : 요청에 따른 페이지 분기처리. <ul><li>router.get(‘/profile’) : 내정보 페이지 </li><li>router.get(‘/join’) : 회원가입 페이지 </li><li>router.get(‘/‘){} : 메인 페이지 </li><li>res.flush(‘에러메시지’) 설정을 통해서 오류 발생 시 메시지 표현을 할 수 있게 된다. </li></ul></li><li>layout.pug : 기본 레이아웃 </li><li>main.pug : 기본레이아웃 확장 + 사진업로드 및 게시글 작성</li><li>join.pug : 기본레이아웃 확장 + 회원가입 폼</li><li>profile.pug :  기본레이아웃 확장 + 내정보보기 </li><li>error.pug : 기본레이아웃 확장 + 에러메시지 </li></ol><p>pug 파일들은 마치 jsp 파일들처럼 분기처리를 해서 표시 항목을 설정할 수 있다. if문과 for 문을 통해서 보여줄 화면을 유동적으로 설정할 수 있다. pug 파일들에 스타일을 적용할 css 파일은 <code>public</code> 폴더 내부에 생성 및 보관하도록 한다!<br><br><br> </p><h4 id="서버-시작-및-화면확인"><a href="#서버-시작-및-화면확인" class="headerlink" title="서버 시작 및 화면확인"></a>서버 시작 및 화면확인</h4><p>서버 시작 : <code>npm start</code><br>웹 브라우저 접속해서 꾸며진 화면 확인 : <code>http://localhost:3000</code><br><br><br></p><h2 id="데이터베이스-생성"><a href="#데이터베이스-생성" class="headerlink" title="데이터베이스 생성"></a>데이터베이스 생성</h2><p>데이터베이스는 sequelize 를 이용해 생성하기로 했다. 해시태그와 팔로잉 기능이 있고 사용자 간의 관계가 중요하므로 관계형 데이터베이스 mysql 을 사용했다.<br>필요한 테이블과 각 테이블에 필요한 컬럼들을 정의한다. </p><p>필요한 테이블은 아래와 같다. DB를 관리하는 <code>models</code> 폴더 아래에 각 테이블 이름에 맞는 <code>user.js</code>, <code>post.js</code>, <code>hashtag.js</code> 파일들을 생성하고 테이블 구조에 맞게 컬럼 설정을 해준다. 관계 설정은 각 테이블마다 해주는 방법도 있지만, 관계를 한번에 알아볼 수 있도록 <code>/models/index.js</code>에서 한번에 해주기로 한다. </p><ul><li>user : email, nick, password, provider(local or kakao), snsId</li><li>post : content, img</li><li>hashtag : title</li><li>관계 설정은 <code>/models/index.js</code>에서 한번에! </li></ul><p><em>꿀팁!</em> 각 테이블에서 <code>timestamps</code>와 <code>paranoid</code>를 <code>true</code> 로 설정해놓으면 생성시간, 수정시간, 삭제시간에 대한 컬럼이 자동으로 생성된다. </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  timestamps : true,  </span><br><span class="line">  paranoid : true,</span><br><span class="line">  //결과 : createdAt, updatedAt, deletedAt 컬럼 생성됨 </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><h4 id="models-index-js"><a href="#models-index-js" class="headerlink" title="/models/index.js"></a>/models/index.js</h4><p>주석에 각 테이블들을 간단히 설명해놓았다. </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">const Sequelize = require(&apos;sequelize&apos;);</span><br><span class="line">const env = process.env.NODE_ENV || &apos;development&apos;;</span><br><span class="line">const config = require(&apos;../config/config&apos;)[env];</span><br><span class="line">const db = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">const sequelize = new Sequelize(</span><br><span class="line">  config.database, config.username, config.password, config, </span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">db.sequelize = sequelize;</span><br><span class="line">db.Sequelize = Sequelize; </span><br><span class="line"></span><br><span class="line">//모델과 연결 </span><br><span class="line">db.User = require(&apos;./user&apos;)(sequelize, Sequelize);</span><br><span class="line">db.Post = require(&apos;./post&apos;)(sequelize, Sequelize);</span><br><span class="line">db.Hashtag = require(&apos;./hashtag&apos;)(sequelize, Sequelize);</span><br><span class="line"></span><br><span class="line">//모델 간 관계설정 </span><br><span class="line">//user - post : 1 대 다</span><br><span class="line">db.User.hasMany(db.Post);</span><br><span class="line">db.Post.belongsTo(db.User);</span><br><span class="line"></span><br><span class="line">//post - hashtag : 다 대 다 </span><br><span class="line">// 중간의 관계 테이블 : PostHashtag</span><br><span class="line">//시퀄라이즈에 의해 자동으로 서로의 setter, getter 가 각각의 model 에 생성된다. </span><br><span class="line">db.Post.belongsToMany(db.Hashtag, &#123;through : &apos;PostHashtag&apos;&#125;);</span><br><span class="line">db.Hashtag.belongsToMany(db.Post, &#123;through : &apos;PostHashtag&apos;&#125;);</span><br><span class="line"></span><br><span class="line">//one user - another user : 다 대 다 관계 </span><br><span class="line">//관계 테이블 : Follow </span><br><span class="line">//두 user 테이블 간의 id 가 중복되므로 따로 foreign key와 테이블 이름을 설정 </span><br><span class="line">//as : JOIN 작업시 사용하는 이름 - 두 테이블 이름이 같으므로, Followers와 Followings 로 각각 지정함 </span><br><span class="line">db.User.belongsToMany(db.User, &#123;</span><br><span class="line">  foreighKey : &apos;followingId&apos;,</span><br><span class="line">  as : &apos;Followers&apos;,</span><br><span class="line">  through : &apos;Follow&apos;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">db.User.belongsToMany(db.User, &#123;</span><br><span class="line">  foreighKey : &apos;followerId&apos;,</span><br><span class="line">  as : &apos;Followings&apos;,</span><br><span class="line">  through : &apos;Follow&apos;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">module.exports = db;</span><br></pre></td></tr></table></figure><p>세 개의 기본 테이블 User, Post, Hashtag 와 더불어 테이블 간 관계에서 발생하는 PostHashtag, Follow 테이블까지 포함하여 총 5개의 테이블이 생성된다.<br><br><br> </p><h4 id="sequelize-로-테이블-생성"><a href="#sequelize-로-테이블-생성" class="headerlink" title="sequelize 로 테이블 생성"></a>sequelize 로 테이블 생성</h4><p>sequelize는 config.json 을 읽어서 데이터베이스를 생성해주는 기능을 가지고 있다. 해당 파일에 mysql 계정 설정을 해보자. </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">// /config/config.json</span><br><span class="line">&#123;</span><br><span class="line">  &quot;development&quot;: &#123;</span><br><span class="line">    &quot;username&quot;: &quot;[계정이름]&quot;,</span><br><span class="line">    &quot;password&quot;: &quot;[계정비번]&quot;,</span><br><span class="line">    &quot;database&quot;: &quot;nodebird&quot;,</span><br><span class="line">    &quot;host&quot;: &quot;127.0.0.1&quot;,</span><br><span class="line">    &quot;dialect&quot;: &quot;mysql&quot;,</span><br><span class="line">    &quot;operatorsAliases&quot;: false</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;test&quot;: &#123;</span><br><span class="line">    &quot;username&quot;: &quot;root&quot;,</span><br><span class="line">    &quot;password&quot;: null,</span><br><span class="line">    &quot;database&quot;: &quot;database_test&quot;,</span><br><span class="line">    &quot;host&quot;: &quot;127.0.0.1&quot;,</span><br><span class="line">    &quot;dialect&quot;: &quot;mysql&quot;,</span><br><span class="line">    &quot;operatorsAliases&quot;: false</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;production&quot;: &#123;</span><br><span class="line">    &quot;username&quot;: &quot;root&quot;,</span><br><span class="line">    &quot;password&quot;: null,</span><br><span class="line">    &quot;database&quot;: &quot;database_production&quot;,</span><br><span class="line">    &quot;host&quot;: &quot;127.0.0.1&quot;,</span><br><span class="line">    &quot;dialect&quot;: &quot;mysql&quot;,</span><br><span class="line">    &quot;operatorsAliases&quot;: false</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>개발용이라서 개발용에만 계정설정을 해줬는데, 나중에 배포할 때는 다른 두 곳도 설정해야한다. mysql 계정이름과 비번을 입력해주고 <code>sequelize db:create</code> 명령어를 이용해서 데이터베이스를 생성!<br><br><br> </p><h4 id="모델과-서버-연결"><a href="#모델과-서버-연결" class="headerlink" title="모델과 서버 연결"></a>모델과 서버 연결</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const &#123;sequelize&#125; = require(&apos;./models&apos;); //sequelize 이용해 서버와 모델(db) 연결 01 : ./models/index.js</span><br><span class="line"></span><br><span class="line">sequelize.sync();   //sequelize 이용해 서버와 모델(db) 연결 02</span><br></pre></td></tr></table></figure><p>sequelize는 테이블 생성 쿼리문에 <code>IF NOT EXISTS</code>를 넣어주므로 테이블이 없다면 자동생성해준다. <code>npm start</code> 명령어로 서버를 실행해주면 테이블이 생성된 것을 mysql workbench에서 바로 확인할 수 있다.<br><br><br> </p><p><a href="https://miniminis.github.io/2019/10/27/node-express-framework-02/">Express framework 이용해서 실시간 SNS 만들기 (2) 바로읽기</a><br><br><br> </p><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="http://www.yes24.com/Product/Goods/62597864?Acode=101" target="_blank" rel="noopener">조현영 개발자님의 Node.js 교과서</a></li><li><a href="https://github.com/ZeroCho/nodejs-book" target="_blank" rel="noopener">Node.js 교과서 예제코드 Git 주소</a></li><li><a href="https://github.com/Miniminis/nodeJS-study-note/tree/master/nodebird" target="_blank" rel="noopener">나의 소스 코드 : 책을 따라하며 발생했던 에러 해결포함</a></li></ul>]]></content:encoded>
      
      <comments>https://miniminis.github.io/2019/10/27/node-express-framework-01/#disqus_thread</comments>
    </item>
    
    <item>
      <title>안드로이드 스튜디오에 핸드폰 연결하기 - 다 해봤는데 안될 때!</title>
      <link>https://miniminis.github.io/2019/10/24/android-03/</link>
      <guid>https://miniminis.github.io/2019/10/24/android-03/</guid>
      <pubDate>Thu, 24 Oct 2019 08:53:56 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;야심차게 안드로이드 공부를 시작하고 있는데, 아주 예전에 코틀린+안드로이드 스튜디오 조합으로 안드로이드를 아주아주 잠시 건드렸을 떄, AVD 로 어플리케이션을 실행하니 컴퓨터가 터지는 줄 알았다. 그때는 지금 쓰고 있는 그램도 아니었고, 무려 5
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p>야심차게 안드로이드 공부를 시작하고 있는데, 아주 예전에 코틀린+안드로이드 스튜디오 조합으로 안드로이드를 아주아주 잠시 건드렸을 떄, AVD 로 어플리케이션을 실행하니 컴퓨터가 터지는 줄 알았다. 그때는 지금 쓰고 있는 그램도 아니었고, 무려 5년 이상 문서용으로 샀던 아주 가벼운 사양의 노트북이어서 더 그랬을 것이다. 당시의 아픈 기억으로 이번에는 실제 공기계와 연결해서 정신 건강을 챙기기로 했다. 그런데 웬걸, 아빠가 무려 2년 전 쓰던 핸드폰을 연결했는데, 안드로이드 스튜디오에서 인식이 잘 안되었다. 문제가 무엇일까?<br><br><br></p><h2 id="개발자-옵션-설정"><a href="#개발자-옵션-설정" class="headerlink" title="개발자 옵션 설정"></a>개발자 옵션 설정</h2><p>안드로이드 실제 폰을 연결해서 개발을 진행하고자 할때는 개발자 옵션 설정을 해주어야 한다. 구글링을 해보면 선배 개발자님들이 아주 다양한 포스팅을 해놓았고 그 중 몇 개를 참고하여 쉽게 진행하였다. </p><ol><li>설정</li><li><code>디바이스 정보</code> or <code>소프트웨어 정보</code>라고 검색 </li><li>빌드번호부분 터치 : 한번해서 안되면 여러번 터치해야함 (애나님은 ‘다다다다’라고 표현했었다.)</li><li>그러면 밑에 <code>개발자 옵션</code> 메뉴가 생성됨. 이쪽으로 들어감. </li><li>USB 디버깅모드를 실행시켜줌 </li><li>컴퓨터와 연결 </li><li>안드로이드 앱 실행 </li><li>핸드폰에서 확인 <br></li></ol><ul><li>참고 <ul><li><a href="https://m.blog.naver.com/PostView.nhn?blogId=beaqon&logNo=221076390196&proxyReferer=https%3A%2F%2Fwww.google.com%2F" target="_blank" rel="noopener">BQRIUM 님의 블로그</a> </li><li><a href="https://hianna.tistory.com/147" target="_blank" rel="noopener">애나 님의 블로그</a></li><li><a href="https://t2t2tt.tistory.com/13" target="_blank" rel="noopener">T.t 님의 블로그</a></li></ul></li></ul><p>그런데 위의 세 분+다른 분들의 블로그를 보면서 진행하다가 공통적으로 막히는 부분이 있었다. 바로 안드로이드 스튜디오에서 <code>show chooser dialog</code>를 선택하는 부분이었다. 나는 현재 안드로이드 스튜디오 3.5.1 버전을 쓰고 있는데 나한테서는 <code>app</code> - <code>Edit Configurations</code> 까지 들어가도 해당 체크박스가 보이지 않았다. 우선 이 부분을 건너뛰고 많은 분들이 공통적으로 말하셨던 통합드라이버 설치로 넘어갔다.<br><br><br></p><h2 id="통합-드라이버-설치"><a href="#통합-드라이버-설치" class="headerlink" title="통합 드라이버 설치"></a>통합 드라이버 설치</h2><p>이곳에서 <a href="http://local.sec.samsung.com/comLocal/support/down/kies_main.do?kind=usb" target="_blank" rel="noopener">삼성 통합드라이버 설치</a> 하기!<br>USB 인식이 잘 되어도 드라이버가 없으면 안드로이드 스튜디오에서 인식을 못하는 경우가 있다고 한다.<br>근데 나는 이 모든 것을 해도 핸드폰에 어플리케이션 화면이 나타나지 않았다. 왜 일까?<br><br><br></p><h2 id="핸드폰이-지원하는-안드로이드-버전에-맞게-프로젝트-언어-버전-변경"><a href="#핸드폰이-지원하는-안드로이드-버전에-맞게-프로젝트-언어-버전-변경" class="headerlink" title="핸드폰이 지원하는 안드로이드 버전에 맞게 프로젝트 언어 버전 변경"></a>핸드폰이 지원하는 안드로이드 버전에 맞게 프로젝트 언어 버전 변경</h2><p>문제점은 두 가지였다. </p><ol><li>사용 중이던 usb 케이블이 데이터 전송용이 아니었다는 점…. (ㅠ)</li><li>프로젝트 내부에서 사용 중이던 언어와 안드로이드 버전이 잘 맞지 않았다는 점 </li></ol><p>1번은 USB 케이블을 교체해주니 정상적으로 해결되었다. 핸드폰 인식은 되는 것이다!<br>2번은 현재 핸드폰의 안드로이드 버전인 8버전에 맞춰서 프로젝트 언어 버전을 8.0 오레오로 다시 바꾸어 프로젝트를 생성하였다.<br>그렇게 HelloAndroid 프로젝트를 실행하니 무사히, 그리고 꽤나 빠르게 어플리케이션이 작동되었다.<br><br><br></p>]]></content:encoded>
      
      <comments>https://miniminis.github.io/2019/10/24/android-03/#disqus_thread</comments>
    </item>
    
    <item>
      <title>기본 위젯으로 화면 구성하기, View 클래스구조, 자바코드로 캐스팅</title>
      <link>https://miniminis.github.io/2019/10/24/android-02/</link>
      <guid>https://miniminis.github.io/2019/10/24/android-02/</guid>
      <pubDate>Thu, 24 Oct 2019 08:53:46 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;오늘은 안드로이드 화면설계를 해보도록 하겠다!&lt;br&gt;기본 위젯(컴포넌트)은 xml 에서 화면 구성을 하고(java 코드로 동적구성) 기타 고급 위젯들을 살펴보겠다.&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&quot;기본-위젯으로-화면-구성&quot;&gt;&lt;a hre
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p>오늘은 안드로이드 화면설계를 해보도록 하겠다!<br>기본 위젯(컴포넌트)은 xml 에서 화면 구성을 하고(java 코드로 동적구성) 기타 고급 위젯들을 살펴보겠다.<br><br><br></p><h2 id="기본-위젯으로-화면-구성"><a href="#기본-위젯으로-화면-구성" class="headerlink" title="기본 위젯으로 화면 구성"></a>기본 위젯으로 화면 구성</h2><h3 id="view-클래스-or-위젯"><a href="#view-클래스-or-위젯" class="headerlink" title="view 클래스 (or 위젯)"></a>view 클래스 (or 위젯)</h3><ul><li>view : 텍스트, 버튼, 이미지 <ul><li>모든 위젯들은 view 클래스를 상속 받음. 나중에 view 클래스로 캐스팅 가능! (다형성에 의해)  </li></ul></li><li>레이아웃 : 위젯의 묶음. 위젯을 담고 있다. 레이아웃도 결국은 위젯이다.<ul><li>레이아웃 안에 레이아웃 생성 가능! </li></ul></li><li>전체 구조  </li></ul><ol><li>최상위에는 Object  </li><li>View  </li><li>ViewGroup <ul><li>LinearLayout : 수직, 수평 등 한 방향으로 연결되는 레이아웃 <ul><li>TableLayout </li><li>RadioGroup </li></ul></li><li>RelativeLayout</li><li>ConstraintLayout </li><li>FrameLayout</li><li>GridLayout </li><li>AdapterView : DB(SQLite)<ul><li>AbsListView<ul><li>ListVew</li><li>GridView </li></ul></li><li>AbsSpinner<ul><li>Gallery</li><li>Spinner  </li></ul></li></ul></li><li>ToolBar </li><li>**WebView : html 문서를 view 로 받아서 처리 가능! <ul><li>현재 진행중인 웹 프로젝트의 리소스 html 파일을 Apk </li><li>aws 배포 </li><li>firebase 배포까지를 목표로!  </li></ul></li></ul></li><li>TextView : 텍스트형태. 클릭 가능한 속성.<ul><li>EditText : 사용자의 입력값 처리 </li><li>Button : 텍스트 클릭 기능 + 배경색 –&gt; 버튼처럼 보이는 효과  <ul><li>CompoundButton <ul><li>CheckBox</li><li>ToggleButton</li><li>Switch</li><li>RadioButton </li></ul></li></ul></li></ul></li><li>ImageView <ul><li>ImageButton : 이미지 클릭 기능. TextView의 Button 과는 다른 형이다. 텍스트 담을 수 없고 처리 불가. 이미지만 처리.   </li></ul></li><li>ProgressBar <ul><li>AbsSeekBar <ul><li>SeekBar</li><li>RatingBar : 별표/별점<br><br><br></li></ul></li></ul></li></ol><h2 id="View-클래스의-xml-속성"><a href="#View-클래스의-xml-속성" class="headerlink" title="View 클래스의 xml 속성"></a>View 클래스의 xml 속성</h2><h3 id="LinearLayout"><a href="#LinearLayout" class="headerlink" title="LinearLayout"></a>LinearLayout</h3><h4 id="orientation"><a href="#orientation" class="headerlink" title="orientation"></a>orientation</h4><p>화면을 수평 혹은 수직 방향으로 나열 </p><ul><li>vertical : 수직방향 </li><li>horizontal : 수평방향 <br></li></ul><h3 id="Button"><a href="#Button" class="headerlink" title="Button"></a>Button</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;Button android:id=&apos;@+id/btn1&apos;/&gt;</span><br></pre></td></tr></table></figure><h4 id="id"><a href="#id" class="headerlink" title="id"></a>id</h4><ul><li><p>id 속성은 모든 위젯의 아이디를 나타냄 (view 클래스의 id 속성을 상속하고 있기 때문임)</p></li><li><p>R클래스의 리소스에 등록하는 과정임. 이 곳에 등록이 되어야 자바 코드에서 캐스팅 가능 </p></li><li><p>자바 코드에서 위젯에 접근할 때, id 속성에 지정한 아이디를 사용한다. </p></li><li><p>등록방법 : <code>android:id=@+id/[새로 지정할 id]</code></p></li><li><p>자바 코드에서 (Activity file) 해당 속성을 캐스팅 : 위젯을 컨트롤 하기 위해서 자바 객체로 변한하는 과정임 </p><ul><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Button button1;</span><br><span class="line">button1 = (Button) findViewById(R.id.btn1);</span><br></pre></td></tr></table></figure></li><li><p>R(resource) 내부의 id 목록 중에서 미리 등록된 btn1이라는 아이디의 버튼을 찾는 과정! </p></li></ul></li></ul><h4 id="layout-width-layout-height"><a href="#layout-width-layout-height" class="headerlink" title="layout_width, layout_height"></a>layout_width, layout_height</h4><ul><li>콘텐츠의 크기 표현이 아니라 영역표현임<br>match_parent : 자신의 부모(대개는 레이아웃)에 폭이나 높이를 맞춘다는 의미<br>wrap_content : 자신의 폭이나 높이를 자신 안의 글자가 들어갈 정도로 설정</li></ul><h4 id="background"><a href="#background" class="headerlink" title="background"></a>background</h4><ul><li>뷰가 가지는 색상 처리 </li></ul><h4 id="padding-layout-margin"><a href="#padding-layout-margin" class="headerlink" title="padding, layout_margin"></a>padding, layout_margin</h4><ul><li>px 이 아니라 dp 로 표현한다. </li></ul><h4 id="visibility"><a href="#visibility" class="headerlink" title="visibility"></a>visibility</h4><ul><li>invisible : 버튼 안보임. 하지만 버튼이 차지하고 있었던 영역은 보임 </li><li>visible : 보임 </li><li>gone : 버튼 안보임. 버튼이 차지하고 있었던 영역도 삭제 </li><li>레이아웃이 유지되어야 한다면 invisible을, 레이아웃이 바뀌어야 한다면 gone 을 사용하면 될듯 </li></ul><h4 id="enabled-clickable"><a href="#enabled-clickable" class="headerlink" title="enabled, clickable"></a>enabled, clickable</h4><ul><li>enabled : 위젯 동작 여부. false시 버튼 동작 안함 &amp; 색도 변경됨 . </li><li>clickable : 클릭이나 터치가 가능하도록 함. false 시 클릭 불가  <ul><li>ImageButton : clickable 속성을 가지고 있음 </li></ul></li></ul><h4 id="rotation"><a href="#rotation" class="headerlink" title="rotation"></a>rotation</h4><ul><li>위젯의 회전<br><br><br></li></ul><h2 id="자바-코드로-동작-정의"><a href="#자바-코드로-동작-정의" class="headerlink" title="자바 코드로 동작 정의"></a>자바 코드로 동작 정의</h2><p>예시 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;Button </span><br><span class="line">  android:id=&quot;@id/button1&quot;</span><br><span class="line">  android:text=&quot;확인&quot;/&gt;</span><br></pre></td></tr></table></figure><ol><li><p>버튼 변수 선언<br><code>Button mybutton</code></p></li><li><p>변수에 버튼 위젯 대입<br><code>mybutton = (Button) findViewById(R.id.button1);</code></p></li><li><p>버튼을 클릭할 때 동작하는 클래스 정의 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mybutton.setOnclickListener( new View.OnClickListener() &#123;</span><br><span class="line">  public void onClick(View v) &#123;</span><br><span class="line">    //클릭시 동작할 내용을 코딩한다. </span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><p><br><br></p><h2 id="라디오-버튼-라디오-그룹"><a href="#라디오-버튼-라디오-그룹" class="headerlink" title="라디오 버튼 + 라디오 그룹"></a>라디오 버튼 + 라디오 그룹</h2><ul><li>라디오 버튼  : 여러개중 하나만 선택해야하는 경우에 사용한다. </li><li>라디오 그룹 : 라디오 버튼만 여러개 나열하면 클릭하는 것마다 모두 중복 선택이 되므로 라디오 그룹과 함께 사용!<br>하나를 선택하면 다른 쪽은 자동으로 선택 해제된다.<br><br><br></li></ul><h2 id="이미지뷰와-이미지버튼"><a href="#이미지뷰와-이미지버튼" class="headerlink" title="이미지뷰와 이미지버튼"></a>이미지뷰와 이미지버튼</h2><p>이미지의 위치 : res - drawable - [파일이름]</p><ul><li>이때, 파일 이름은 반드시 소문자 </li><li>중복 안됨  <ul><li>star.jpg == star.png<br><br><br></li></ul></li></ul><h2 id="계산기를-만들어보자"><a href="#계산기를-만들어보자" class="headerlink" title="계산기를 만들어보자!"></a>계산기를 만들어보자!</h2><ol><li>화면구성하기 <ul><li>Edit1 : 첫번째 숫자 - 캐스팅 : 사용자의 입력값을 변수로 저장</li><li>Edit2 : 두번째 숫자 - 캐스팅 : 사용자의 입력값을 변수로 저장</li><li>Button1 : 더하기 </li><li>Button2 : 빼기 </li><li>Button3 : 곱하기 </li><li>Button4 : 나누기 </li><li>TextView : 결과표현  </li></ul></li><li>자바 코드로 캐스팅 <ul><li>버튼 클릭 or 터치 시에 동작할 이벤트 작성 </li></ul></li><li>테스트!<br><br><br></li></ol><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="http://www.yes24.com/Product/Goods/68699712?Acode=101" target="_blank" rel="noopener">Android Studio를 활용한 안드로이드 프로그래밍- 우재남, 박길식</a></li></ul>]]></content:encoded>
      
      <comments>https://miniminis.github.io/2019/10/24/android-02/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Mysql / 조인</title>
      <link>https://miniminis.github.io/2019/10/23/db-basic-03/</link>
      <guid>https://miniminis.github.io/2019/10/23/db-basic-03/</guid>
      <pubDate>Wed, 23 Oct 2019 09:21:52 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;어제 선배 개발자분으로부터 이런 이야기를 들었다. &lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;몇 십년 이상 프로그래밍을 해오다보니, 결국 마지막에 남는 것은 데이터베이스와 SQL 쿼리문이다. 원하는 데이터를 얼마나 잘 효율적으로 가져올 수 있는지가 가장
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p>어제 선배 개발자분으로부터 이런 이야기를 들었다. </p><blockquote><p>몇 십년 이상 프로그래밍을 해오다보니, 결국 마지막에 남는 것은 데이터베이스와 SQL 쿼리문이다. 원하는 데이터를 얼마나 잘 효율적으로 가져올 수 있는지가 가장 중요한 것 같다. </p></blockquote><p>맨 처음 SQL 문을 배울 때에는 프로그래밍 언어보다 쉽고, 데이터를 내가 조작한다는 것이 재미있어서, 또 쿼리문을 딱 적어서 <code>control + enter</code> 했을 때, 내가 원하는 데이터가 똭! 출력되는 그 느낌이 짜릿해서 일반 프로그래밍을 하는 것보다 더 쉽고 재밌다고 느꼈었던 것 같다. 하지만 계속 팀 프로젝트를 진행하면서 DB 설계가 잘못되었을 때, 발생할 수 있는 엄청난 일들(할많하않..)과 많은 테이블들 사이에서 효율적으로 조인하여 원하는 데이터를 얻어오는 것의 어려움을 절실히 느끼게 되면서 그분의 말씀이 참 공감되는 부분이 많았다. <br></p><p>그래서 오늘은 그간 잠시 잊고 있었던 조인의 기본개념을 다시 복습하며 살벌한 DB의 세계로 잠시 들어가본다.(눙물…) <br><br></p><h2 id="사용예제"><a href="#사용예제" class="headerlink" title="사용예제 :"></a>사용예제 :</h2><ol><li>EMP table : 사원번호, 사원이름, 사원직책, 상관번호, 고용일, 월급, 커미션, 부서번호 등의 컬럼으로 구성됨 </li><li>DEPT table : 부서번호, 부서이름, 부서위치 컬럼으로 구성됨</li></ol><ul><li>참고 : <a href="https://www.lesstif.com/pages/viewpage.action?pageId=18219073" target="_blank" rel="noopener">Oracle 및 MySQL용 EMP/DEPT table schema &amp; test data</a><br><br><br></li></ul><h2 id="Cross-Join"><a href="#Cross-Join" class="headerlink" title="Cross Join"></a>Cross Join</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT *</span><br><span class="line">FROM EMP, DEPT;</span><br></pre></td></tr></table></figure><p>특정한 조건 없이 두 테이블 조인을 한 경우다. 이렇게 될 경우 두 테이블에 있는 모든 컬럼과 로우가 결합되어 어마무지하게 많아진다. 결국 조건 없이 조인만 해서는 의미있는 데이터를 얻을 수 없다. 의미있는 데이터를 얻기 위해 조건을 추가해서 조인을 해보자. 아래는 CROSS JOIN의 4가지 종류를 나타낸다.<br><br></p><h2 id="Equi-Join"><a href="#Equi-Join" class="headerlink" title="Equi Join"></a>Equi Join</h2><p>동일 컬럼이 존재하고 그 컬럼을 기준으로 조인<br>공통컬럼의 경우는 <code>테이블 이름.컬럼명</code>으로 해주어야 정확하게 인식된다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT * </span><br><span class="line">FROM EMP, DEPT </span><br><span class="line">WHERE EMP.DEPTNO = DEPT.DEPTNO;</span><br></pre></td></tr></table></figure><br>WHERE 절에는 컬럼 조인 조건과 함께 AND 연산을 더해주어 얼마든지 조건을 추가해줄 수 있다. <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT ENAME, DNAME </span><br><span class="line">FROM EMP, DEPT </span><br><span class="line">WHERE EMP.DEPTNO = DEPT.DEPTNO</span><br><span class="line">AND ENAME=&apos;SCOTT&apos;;</span><br></pre></td></tr></table></figure><br><p>테이블에 별칭을 부여하고 컬럼명을 적어주면 모호성을 해결할 수 있다. </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-- &quot;열의 정의가 애매합니다&quot; 에러 발생 </span><br><span class="line">SELECT ENAME, DNAME, DEPTNO FROM EMP, DEPT WHERE EMP.DEPTNO = DEPT.DEPTNO AND ENAME=&apos;SCOTT&apos;;</span><br><span class="line"></span><br><span class="line">-- 별칭부여 + 별칭.컬럼명 적용 --&gt; 에러 없음</span><br><span class="line">SELECT E.ENAME, D.DNAME, E.DEPTNO, D.DEPTNO</span><br><span class="line">FROM EMP E, DEPT D</span><br><span class="line">WHERE E.DEPTNO = D.DEPTNO</span><br><span class="line">AND E.ENAME=&apos;SCOTT&apos;;</span><br></pre></td></tr></table></figure><p><br><br></p><h2 id="Non-Equi-Join"><a href="#Non-Equi-Join" class="headerlink" title="Non-Equi Join"></a>Non-Equi Join</h2><p>동일 컬럼이 없고 다른 조건을 이용하여 조인<br>조인 조건을 쓸 때, 조회하고자 하는 테이블에서 조건테이블의 특정 범위 내에 있는 값들을 조회하고자 할때 사용하며 비교연산자를 사용한다. </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT ENAME, SAL, GRADE</span><br><span class="line">FROM EMP, SALGRADE</span><br><span class="line">WHERE SAL BETWEEN LOSAL AND HISAL;</span><br></pre></td></tr></table></figure><p>이 쿼리문의 경우는 SALGRADE 라고 하는 연봉 테이블에서 LOSAL ~ HISAL 범위 내에 SAL 값이 있는 사원의 이름과 연봉, 등급을 조회하고 있다.<br><br><br></p><h2 id="Self-Join"><a href="#Self-Join" class="headerlink" title="Self Join"></a>Self Join</h2><p>한 테이블 내에서 조인<br>SELF JOIN 의 경우는 대표적으로 EMP 테이블을 예로들 수 있다. </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT EMPLOYEE.ENAME, MANAGER.ENAME </span><br><span class="line">FROM EMP EMPLOYEE, EMP MANAGER </span><br><span class="line">WHERE EMPLOYEE.MGR = MANAGER.EMPNO;</span><br></pre></td></tr></table></figure><p>이 경우, EMP 라는 사원 테이블의 컬럼 중에는 사원번호와 이름도 있지만 상관의 번호 역시 존재한다. 하지만 상관 역시 사원이므로 이 경우에는 사원 테이블 2개를 조인하게 된다.<br><br><br></p><h2 id="Outer-Join"><a href="#Outer-Join" class="headerlink" title="Outer Join"></a>Outer Join</h2><p>조인 조건에 만족하지 않는 행도 나타낸다.<br>위의 SELF JOIN 에서 사원과 상관을 구하는 쿼리에서 결과값에는 KING 이라고 하는 회사의 사장은 빠져있다. 그 이유는 사장의 사원번호는 존재하지만, 사장은 매니저가 존재하지 않으므로 <code>EMPLOYEE.MGR</code> 부분에서 <code>NULL</code> 값이 들어오게 되는 것이다. 사원번호가 NULL 인 사원은 없으므로 <code>NULL = KING의 EMPNO</code>이라는 조건은 성립되지 않게 되어 사장은 쿼리문에 의해 결과값으로 조회되지 않는다. <br></p><p>그러나, 사장도 사원이다. 결과 테이블에 나타내주고 싶다! 이럴 때 사용할 수 있는 것이 바로 OUTER JOIN 이다.  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-- 오라클 기준 </span><br><span class="line">SELECT EMPLOYEE.ENAME, MANAGER.ENAME </span><br><span class="line">FROM EMP EMPLOYEE, EMP MANAGER,</span><br><span class="line">WHERE EMPLOYEE.MGR = MANAGER.EMPNO(+);</span><br></pre></td></tr></table></figure><p>(오라클 기준) 이렇게 정보가 부족한 부분에 (+)를 붙이면 된다. Mysql 의 경우는 아래의 Ansi Join을 살펴보면서 같이 보자.<br><br><br></p><h2 id="ANSI-Join"><a href="#ANSI-Join" class="headerlink" title="ANSI Join"></a>ANSI Join</h2><h3 id="INNER-JOIN-ON-OR-INNER-JOIN-USING"><a href="#INNER-JOIN-ON-OR-INNER-JOIN-USING" class="headerlink" title="[INNER JOIN + ON] OR [INNER JOIN + USING]"></a>[INNER JOIN + ON] OR [INNER JOIN + USING]</h3><p>Ansi Join 같은 경우는 <code>Inner Join</code> + <code>on (조건절)</code> 을 사용하여 표현한다. </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM table1 INNER JOIN table2</span><br><span class="line">ON table1.column1 = table2.column2;</span><br></pre></td></tr></table></figure><p>ANSI JOIN 같은 경우는 조인 조건은 ON 에, 다른 부가적인 조건은 WHERE 절에 나누어 적을 수 있어서 코드의 가독성이 높아지는 것 같다. </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT ENAME, DNAME</span><br><span class="line">FROM EMP INNER JOIN DEPT</span><br><span class="line">ON EMP.DEPTNO=DEPT.DEPTNO</span><br><span class="line">WHERE ENAME=&apos;SCOTT&apos;;</span><br></pre></td></tr></table></figure><p><code>USING</code> 을 이용하면 공통된 컬럼을 하나만 출력해주어 보다 깔끔한 조회결과를 얻을 수 있다. </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT EMP.ENAME, DEPT.DNAME</span><br><span class="line">FROM EMP INNER JOIN DEPT</span><br><span class="line">USING (DEPTNO);</span><br></pre></td></tr></table></figure><br><h3 id="NATURAL-JOIN"><a href="#NATURAL-JOIN" class="headerlink" title="NATURAL JOIN"></a>NATURAL JOIN</h3><p>NATURAL JOIN 을 이용하게 되면 같은 이름의 컬럼에 대해서는 굳이 조인 조건문을 작성해주지 않아도 된다. </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT EMP.ENAME, DEPT.ENAME FROM EMP NATURAL JOIN DEPT;</span><br></pre></td></tr></table></figure><br><h3 id="OUTER-JOIN"><a href="#OUTER-JOIN" class="headerlink" title="OUTER JOIN"></a>OUTER JOIN</h3><p>세 가지 타입의 조인을 제공! </p><ol><li>LEFT OUTER JOIN </li><li>RIGHT OUTER JOIN </li><li>FULL OUTER JOIN </li></ol><p>위에서 나온 OUTER JOIN 과 같이 한쪽 테이블에는 존재하는데 다른 쪽 테이블에는 존재하지 않는 테이터를 출력하고자 할 때 사용한다.<br><br></p><h4 id="벤다이어그램에서-A-부분만-교집합-포함"><a href="#벤다이어그램에서-A-부분만-교집합-포함" class="headerlink" title="벤다이어그램에서 A 부분만! (교집합 포함)"></a>벤다이어그램에서 A 부분만! (교집합 포함)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT * </span><br><span class="line">FROM DEPT01 LEFT OUTER JOIN DEPT02 </span><br><span class="line">ON DEPT01.DEPTNO = DEPT02.DEPTNO;</span><br></pre></td></tr></table></figure><h4 id="벤다이어그램에서-B-부분만-교집합-포함"><a href="#벤다이어그램에서-B-부분만-교집합-포함" class="headerlink" title="벤다이어그램에서 B 부분만! (교집합 포함)"></a>벤다이어그램에서 B 부분만! (교집합 포함)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT * </span><br><span class="line">FROM DEPT01 RIGHT OUTER JOIN DEPT02</span><br><span class="line">USING (DEPTNO);</span><br></pre></td></tr></table></figure><h4 id="벤다이어그램에서-합집합-A-B"><a href="#벤다이어그램에서-합집합-A-B" class="headerlink" title="벤다이어그램에서 합집합 (A+B)"></a>벤다이어그램에서 합집합 (A+B)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT * </span><br><span class="line">FROM DEPT01 FULL OUTER JOIN DEPT02</span><br><span class="line">USING(DEPTNO);</span><br></pre></td></tr></table></figure><p><br><br></p><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="http://rapapa.net/?p=311" target="_blank" rel="noopener">Mysql Join 해부(Left, Right, Outer, Inner Join)</a> : 벤다이어그램으로 데이터가 조회되는 부분이 명확히 표시되어있어서 이해하기에 편하다. </li></ul>]]></content:encoded>
      
      <comments>https://miniminis.github.io/2019/10/23/db-basic-03/#disqus_thread</comments>
    </item>
    
    <item>
      <title>안드로이드 환경설정, 주요 기능, HelloAndroid 프로그램 만들어보기</title>
      <link>https://miniminis.github.io/2019/10/23/android-01/</link>
      <guid>https://miniminis.github.io/2019/10/23/android-01/</guid>
      <pubDate>Wed, 23 Oct 2019 09:21:42 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;사실은 &lt;a href=&quot;https://miniminis.github.io/projects/&quot;&gt;연차프로젝트&lt;/a&gt;를 진행할 때부터 우리 조는 모두 안드로이드 앱 배포까지를 염두해두고 있었다. (물론 가능하다면…) 그러나 취업준비와 프로젝트 진행을 
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p>사실은 <a href="https://miniminis.github.io/projects/">연차프로젝트</a>를 진행할 때부터 우리 조는 모두 안드로이드 앱 배포까지를 염두해두고 있었다. (물론 가능하다면…) 그러나 취업준비와 프로젝트 진행을 동시에 병행하기는 역시 쉽지 않은터라, 조원들이 다같이 안드로이드를 시작하기에는 힘들었다. 나는 개인적으로 우리 서비스를 안드로이드에서까지 보는 것으로 목표를 잡았었기에 조금씩이지만 안드로이드를 배우면서 프로젝트를 업그레이드 시켜보고자 한다. 물론 전체 프로젝트는 무리겠고, 일부 기능만! 그럼 개발환경 설정부터 하나하나 시작해보도록 하자.<br><br><br></p><h2 id="개발환경설정"><a href="#개발환경설정" class="headerlink" title="개발환경설정"></a>개발환경설정</h2><ol><li>JDK 설정 (설치)</li><li>Android Studio 설치 - 최신버전 추천 </li></ol><ul><li>SDK 설치 </li><li>AVD 설치 </li><li>에뮬레이터 생성<br><br><br></li></ul><h2 id="안드로이드-주요-특징"><a href="#안드로이드-주요-특징" class="headerlink" title="안드로이드 주요 특징"></a>안드로이드 주요 특징</h2><ol><li>핵심 커널이 리눅스로 구성되어있다. </li><li>어플리케이션 개발언어는 java 를 사용한다. </li><li>안드로이드 SDK 에서 많은 라이브러리를 사용하고 있어서 개발이 용이하다.<br><br><br></li></ol><h2 id="안드로이드-구조"><a href="#안드로이드-구조" class="headerlink" title="안드로이드 구조"></a>안드로이드 구조</h2><ol><li>응용프로그램 : 안드로이드 스마트폰에서 사용할 수 있는 일반적인 응용 프로그램 <ul><li>home, contacts, phone, browser … </li></ul></li><li>응용프로그램 프레임워크 <ul><li>안드로이드 API 가 존재하는 곳 </li><li>안드로이드 폰 하드웨어 접근할 때는 java에 직접 접근하는 것이 아니라 이 API 를 통해서 가능하다! </li><li>activity manager, window manager, content providers, view system, package manager 등 </li></ul></li><li>라이브러리 <ul><li>SQLite 등 </li><li>시스템 접근 때문에 C로 작성됨 </li></ul></li><li>안드로이드 런타임 : java core 라이브러리 + Dalvik Virtual Machine 또는 ART Runtime 으로 구성 </li><li>리눅스 커널 <ul><li>하드웨어 운영과 관련된 저수준의 관리기능 </li><li>메모리 관리, 디바이스 드라이버, 보안 등<br><br><br></li></ul></li></ol><h2 id="실습-“Hello-Android”-프로그램-만들어보기"><a href="#실습-“Hello-Android”-프로그램-만들어보기" class="headerlink" title="[실습] “Hello Android” 프로그램 만들어보기"></a>[실습] “Hello Android” 프로그램 만들어보기</h2><h3 id="안드로이드-프로그램-개발-과정"><a href="#안드로이드-프로그램-개발-과정" class="headerlink" title="안드로이드 프로그램 개발 과정"></a>안드로이드 프로그램 개발 과정</h3><ol><li>안드로이드 프로젝트를 생성한다. <ul><li>설정 파일에서 SDK 설정 가능! </li><li>[Start a new Android Studio project] 클릭!</li><li>참고 : <ul><li>빌드도구 : 컴파일, 빌드, 패키징 처리. maven 에서 gradle 로 이동하는 추세 </li><li>IntelliJ 기반의 안드로이드 스튜디오는 gradle 로 설정하는 것이 보통이다. </li><li>Eclipse ADT : 복잡하고 힘듬. 요즘은 거의 사용되지 않는다. </li></ul></li><li>[Import an Android code sample] : 안드로이드에서 제공하는 대부분의 코드를 확인 가능하다.</li><li>어플리케이션 이름, company domain, project location 설정 <ul><li>company domain : 회사의 도메인. 패키지명 &gt;&gt;&gt; google play 등록 </li></ul></li><li>Target Android Devices : 어플리케이션을 주로 사용하게 될 사용자 층의 안드로이드 디바이스를 설정<ul><li>minimum SDK 등록 : 자바의 경우 1.6+ </li><li>phone and tablet 체크 </li></ul></li><li>엑티비티 설정 : 여기서는 Empty Activity 체크</li><li>Activity name : 기본 소스인 java 파일 이름으로 지정하고 </li><li>layout name : 기본 화면인 xml 파일 이름으로 지정한다. </li></ul></li><li>화면 디자인 및 편집(*.xml) : 내부에서 액티비티가 캐스팅 처리됨<ul><li>project tree 에서 추가된 HelloAndroid 프로젝트 확인!</li><li>text 클릭해서 <code>android.support.constraint.ConstraintLayout</code> 을 <code>RelativeLayout</code> 으로 변경한다. </li><li>왼쪽[Widgets]에서 사용할 수 있는 컴포넌트들을 확인 </li><li>컴포넌트를 추가하면 xml에서 코드생성됨. 삭제하면 같이 삭제! </li><li>Project Tree의 [java]-[com.cookandroid.helloandroid]-[MainActivity] 선택 <ul><li>최초 실행시에 <code>onCreate()</code> 매서드를 실행하게 된다. </li><li>이전에 설정해둔 xml 파일이 실행된다. - 코드 상에서 확인 </li></ul></li><li><code>MainActivity.java</code> : 엑티비티에서 화면을 만든다! <ul><li><code>setContentView(R.layout.activity_main)</code> : activity_main.xml의 요소들을 표현. <ul><li>R : 클래스 </li><li>layout : 참조변수 </li><li>activity_main : int 타입으로 관리된다. </li><li>결국 안드로이드에서는 : res(R)폴더 내부의 폴더들(layout)내부에 파일을 참조하는 방식으로 사용할 수 있다. 안드로이드에서 관리해줌. </li></ul></li></ul></li></ul></li><li>java/kotlin 코드를 작성 + 수정 (*.java) : 빌드!</li><li>프로젝트 실행 및 결과를 확인한다 (안드로이드 단말기가 있다면 그것으로, or AVD)</li><li>정상작동되면 emulator 에 화면이 표시될 것이고, 오류가 있다면 콘솔창에 에러메시지 출력될 것임! </li><li>안드로이드 어플리케이션 개발 완료! </li></ol><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="http://www.yes24.com/Product/Goods/68699712?Acode=101" target="_blank" rel="noopener">Android Studio를 활용한 안드로이드 프로그래밍- 우재남, 박길식</a></li></ul>]]></content:encoded>
      
      <comments>https://miniminis.github.io/2019/10/23/android-01/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Socket.io 이용하여 서로 다른 두 사용자간 실시간 데이터 공유</title>
      <link>https://miniminis.github.io/2019/10/21/node-socket-ycar-example-1/</link>
      <guid>https://miniminis.github.io/2019/10/21/node-socket-ycar-example-1/</guid>
      <pubDate>Mon, 21 Oct 2019 05:50:15 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;지난번 &lt;a href=&quot;https://miniminis.github.io/2019/10/11/node-deploy/&quot;&gt;firebase와 aws ec2에 node 서버 배포하기&lt;/a&gt; 포스팅을 통해 연차 프로젝트를 간단히 소개하며 node 서버의 
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p>지난번 <a href="https://miniminis.github.io/2019/10/11/node-deploy/">firebase와 aws ec2에 node 서버 배포하기</a> 포스팅을 통해 연차 프로젝트를 간단히 소개하며 node 서버의 최종 배포 부분을 다루었다. 연차 프로젝트는 직장인을 위한 카풀 웹앱으로, 탑승자용 어플리케이션과 운전자용 어플리케이션이 나누어져있다. 오늘은 바로 이 두 사용자, 탑승자와 운전자가 실시간으로 데이터를 공유하는 부분을 구성하는 과정에서, socket.io 를 이용하여 node 서버를 구축한 과정을 간단히 포스팅할까한다. <em>클라이언트 쪽 실제 코드는 훨씬 길지만, socket 통신부분의 핵심이 되는 부분만 간략하게 표현하였다.</em><br><br></p><h2 id="구현하고자-하는-것-구현-결과-이미지-포함"><a href="#구현하고자-하는-것-구현-결과-이미지-포함" class="headerlink" title="구현하고자 하는 것 (구현 결과 이미지 포함)"></a>구현하고자 하는 것 (구현 결과 이미지 포함)</h2><p>소켓 통신을 이용해 구현하고자 하는 세 부분은 다음과 같았다. </p><h4 id="1-카풀-리스트에서-탑승자는-탑승대기-운전자는-운행시작을-누른다-gt-gt-운행-중-화면으로-동시에-전환"><a href="#1-카풀-리스트에서-탑승자는-탑승대기-운전자는-운행시작을-누른다-gt-gt-운행-중-화면으로-동시에-전환" class="headerlink" title="1. 카풀 리스트에서 탑승자는 탑승대기, 운전자는 운행시작을 누른다 &gt;&gt; 운행 중 화면으로 동시에 전환"></a>1. 카풀 리스트에서 탑승자는 탑승대기, 운전자는 운행시작을 누른다 &gt;&gt; 운행 중 화면으로 동시에 전환</h4><p><img src="/images/ycar14.png" alt="운행시작"></p><h4 id="2-운행-중-화면에서-탑승자가-운행종료를-누르면-gt-gt-두-사용자의-화면이-동시에-결제페이지로-이동"><a href="#2-운행-중-화면에서-탑승자가-운행종료를-누르면-gt-gt-두-사용자의-화면이-동시에-결제페이지로-이동" class="headerlink" title="2. 운행 중 화면에서 탑승자가 운행종료를 누르면 &gt;&gt; 두 사용자의 화면이 동시에 결제페이지로 이동"></a>2. 운행 중 화면에서 탑승자가 운행종료를 누르면 &gt;&gt; 두 사용자의 화면이 동시에 결제페이지로 이동</h4><p><img src="/images/ycar15.png" alt="운행시작"></p><h4 id="3-사용자가-결제에-성공하면-gt-gt-결제-내역-정보를-두-사용자에게-동시에-표시"><a href="#3-사용자가-결제에-성공하면-gt-gt-결제-내역-정보를-두-사용자에게-동시에-표시" class="headerlink" title="3. 사용자가 결제에 성공하면 &gt;&gt; 결제 내역 정보를 두 사용자에게 동시에 표시"></a>3. 사용자가 결제에 성공하면 &gt;&gt; 결제 내역 정보를 두 사용자에게 동시에 표시</h4><p><img src="/images/ycar18.png" alt="운행시작"><br><br><br></p><h2 id="왜-node-어째서-socket-io"><a href="#왜-node-어째서-socket-io" class="headerlink" title="왜 node, 어째서 socket.io?"></a>왜 node, 어째서 socket.io?</h2><p>구현하고 싶은 것이 명확해졌고, 이를 구현하기 위해서 어떤 기술을 이용해야할지를 고민해야했다. 실시간 양방향 통신과 관련하여 구글링을 했고, 웹소켓과 socket.io를 찾을 수 있었다. 조원들과 논의한 결과, 우리는 node.js 모듈인 socket.io 를 쓰기로 결정했는데, 그 이유는 다음과 같았다. <br></p><h5 id="Html5-표준안의-일부로-나온-Web-Socket-프로토콜의-경우는-지원하는-브라우저가-한정되어있었고-브라우저마다-지원하는-버전에도-차이가-있었다"><a href="#Html5-표준안의-일부로-나온-Web-Socket-프로토콜의-경우는-지원하는-브라우저가-한정되어있었고-브라우저마다-지원하는-버전에도-차이가-있었다" class="headerlink" title="Html5 표준안의 일부로 나온 Web Socket 프로토콜의 경우는 지원하는 브라우저가 한정되어있었고 브라우저마다 지원하는 버전에도 차이가 있었다."></a>Html5 표준안의 일부로 나온 Web Socket 프로토콜의 경우는 지원하는 브라우저가 한정되어있었고 브라우저마다 지원하는 버전에도 차이가 있었다.</h5><h5 id="반면-socket-io-같은-경우는-표준기술이-아니라-node-js-모듈의-일부로서-Web-Socket과-관련-기술들을-하나의-API로-모아놓은-개념이었다-따라서-해당-모듈이-브라우저마다-적합한-socket-기술을-적용해줄-수-있었고-구현하기에도-훨씬-편했다"><a href="#반면-socket-io-같은-경우는-표준기술이-아니라-node-js-모듈의-일부로서-Web-Socket과-관련-기술들을-하나의-API로-모아놓은-개념이었다-따라서-해당-모듈이-브라우저마다-적합한-socket-기술을-적용해줄-수-있었고-구현하기에도-훨씬-편했다" class="headerlink" title="반면 socket.io 같은 경우는 표준기술이 아니라 node.js 모듈의 일부로서 Web Socket과 관련 기술들을 하나의 API로 모아놓은 개념이었다. 따라서 해당 모듈이 브라우저마다 적합한 socket 기술을 적용해줄 수 있었고 구현하기에도 훨씬 편했다."></a>반면 socket.io 같은 경우는 표준기술이 아니라 node.js 모듈의 일부로서 Web Socket과 관련 기술들을 하나의 API로 모아놓은 개념이었다. 따라서 해당 모듈이 브라우저마다 적합한 socket 기술을 적용해줄 수 있었고 구현하기에도 훨씬 편했다.</h5><p>socket.io 를 쓰기 위해서 실시간 양방향 통신이 필요한 위의 세 부분은 node.js 로 서버를 구성하기로 했다. <br><br></p><h2 id="서버와-클라이언트-소켓-연결"><a href="#서버와-클라이언트-소켓-연결" class="headerlink" title="서버와 클라이언트 소켓 연결"></a>서버와 클라이언트 소켓 연결</h2><p>먼저 간단한 서버 코드를 작성하고 클라이언트에서 소켓을 연결해보기로 한다. <br></p><h4 id="server-js"><a href="#server-js" class="headerlink" title="server.js"></a>server.js</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">//1</span><br><span class="line">var app = require(&apos;express&apos;)();</span><br><span class="line">var http = require(&apos;http&apos;).createServer(app);</span><br><span class="line">var io = require(&apos;socket.io&apos;)(http);</span><br><span class="line"></span><br><span class="line">app.get(&apos;/&apos;, function(req, res)&#123;&#125;);</span><br><span class="line"></span><br><span class="line">//2  </span><br><span class="line">io.on(&apos;connection&apos;, function(socket)&#123;</span><br><span class="line">    console.log(&apos;클라이언트 연결됨. 소켓 id는 : &apos;, socket.id);  //2-1</span><br><span class="line"></span><br><span class="line">    socket.on(&apos;disconnect&apos;, function()&#123;   //2-2</span><br><span class="line">        console.log(&apos;사용자 연결 종료 ::&apos;, socket.id);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//3</span><br><span class="line">http.listen(3000, function()&#123;</span><br><span class="line">    console.log(&apos;연차 노드 서버 연결 시작&apos;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="carpoollistClient-jsp"><a href="#carpoollistClient-jsp" class="headerlink" title="carpoollistClient.jsp"></a>carpoollistClient.jsp</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot; pageEncoding=&quot;UTF-8&quot;%&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;탑승자 | 예약 목록&lt;/title&gt;</span><br><span class="line">&lt;script src=&quot;http://localhost:3000/socket.io/socket.io.js&quot;&gt;&lt;/script&gt;  //4</span><br><span class="line">&lt;script src=&quot;https://code.jquery.com/jquery-1.12.4.js&quot;&gt;&lt;/script&gt;      //5</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  var socket = io(&apos;http://localhost:3000/&apos;);                          //6</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h4 id="carpoollistDriver-jsp"><a href="#carpoollistDriver-jsp" class="headerlink" title="carpoollistDriver.jsp"></a>carpoollistDriver.jsp</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot; pageEncoding=&quot;UTF-8&quot;%&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;운전자 | 카풀 목록&lt;/title&gt;</span><br><span class="line">&lt;script src=&quot;http://localhost:3000/socket.io/socket.io.js&quot;&gt;&lt;/script&gt;   //4</span><br><span class="line">&lt;script src=&quot;https://code.jquery.com/jquery-1.12.4.js&quot;&gt;&lt;/script&gt;       //5</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  var socket = io(&apos;http://localhost:3000/&apos;);                           //6</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>//1 : 우선 express framework 을 이용하여 app을 만들어주고 http 서버를 생성한다. 그 http 서버를 socket.io 모듈에 연결한다.<br>//2 : 소켓에 연결되었을때의 이벤트 리스너이다. 클라이언트에서 소켓을 연결하면 바로 //2-1 에 의해 서버 콘솔창에 클라이언트의 소켓 id 가 찍힌다. 클라이언트의 url이 바뀌거나 페이지가 변경되는 등 소켓 연결이 종료되면 <code>disconnect</code> 이벤트 리스너에 의해 사용자 연결 종료를 서버측에서 확인할 수 있다.<br>//3 : http 서버의 포트번호와 서버가 시작되고 난 뒤 표시할 메시지를 정의해준다. listen() 이벤트를 통해 서버가 연결된다. <br></p><p>//4 : socket.io CDN을 통해 라이브러리에 연결<br>//5 : 나중에 사용할 jquery 를 위해 cdn 으로 연결<br>//6 : io() 함수 통해서 소켓 연결<br></p><p>운전자용 클라이언트 페이지도 같은 방식으로 소켓 연결. <br></p><p>두 클라이언트 페이지를 로드하면 서버의 콘솔창에 다음과 같이 표시될 것이다. </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">연차 노드 서버 연결 시작</span><br><span class="line">클라이언트 연결됨. 소켓 id는 : [socket.id]</span><br><span class="line">클라이언트 연결됨. 소켓 id는 : [socket.id]</span><br></pre></td></tr></table></figure><p>그렇다면 이제 특정 사용자들사이에서만 실시간 데이터 공유를 할 수 있도록 코드를 작성해본다.<br><br><br></p><h2 id="Room-이용하여-운전자에서-운행시작버튼을-누르면-탑승자와-운전자-모두-운행중-페이지로-동시에-전환"><a href="#Room-이용하여-운전자에서-운행시작버튼을-누르면-탑승자와-운전자-모두-운행중-페이지로-동시에-전환" class="headerlink" title="Room 이용하여 운전자에서 운행시작버튼을 누르면 탑승자와 운전자 모두 운행중 페이지로 동시에 전환"></a>Room 이용하여 운전자에서 운행시작버튼을 누르면 탑승자와 운전자 모두 운행중 페이지로 동시에 전환</h2><p>socket.io 를 이용해서 1대 1 실시간 데이터 공유를 하는 방법에는 크게 2가지가 있다. </p><ol><li>‘Room’이라는 공간을 만들어 특정 두 사용자들만 룸 내부에서 정보를 공유하거나</li><li>내가 공유하고자 하는 사람의 socket id를 특정하여 정보를 공유하거나. </li></ol><p>나는 1번의 방법을 이용해서 2명만 들어갈 수 있는 room 을 만들어 정보를 공유하도록 했다. <br><br></p><h4 id="server-js-1"><a href="#server-js-1" class="headerlink" title="server.js"></a>server.js</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">//1</span><br><span class="line">var app = require(&apos;express&apos;)();</span><br><span class="line">var http = require(&apos;http&apos;).createServer(app);</span><br><span class="line">var io = require(&apos;socket.io&apos;)(http);</span><br><span class="line"></span><br><span class="line">app.get(&apos;/&apos;, function(req, res)&#123;&#125;);</span><br><span class="line"></span><br><span class="line">//2 </span><br><span class="line">io.on(&apos;connection&apos;, function(socket)&#123;</span><br><span class="line">    console.log(&apos;클라이언트 연결됨. 소켓 id는 : &apos;, socket.id);  //2-1</span><br><span class="line"></span><br><span class="line">    socket.on(&apos;disconnect&apos;, function()&#123;  //2-2</span><br><span class="line">        console.log(&apos;사용자 연결 종료 ::&apos;, socket.id);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    //7 </span><br><span class="line">    //7-1</span><br><span class="line">    //운행 시작 room</span><br><span class="line">    var startroom = new Array();</span><br><span class="line">    var startRoomIdx;</span><br><span class="line"></span><br><span class="line">    //7-2</span><br><span class="line">    //운행 시작 시 start room join 처리 </span><br><span class="line">    socket.on(&apos;join start room&apos;, function(r_idx) &#123;</span><br><span class="line">        console.log(&apos;r_idx 로 운행시작 룸 조인 &apos;, r_idx);</span><br><span class="line"></span><br><span class="line">        //7-3     </span><br><span class="line">        startRoomIdx = startroom.indexOf(&apos;startroom&apos;+r_idx);</span><br><span class="line">        if(r_idx != null  &amp;&amp; startRoomIdx == -1) &#123; //만약 r_idx 번 방이 존재하지 않다면,</span><br><span class="line">            startroom.push(&apos;startroom&apos;+r_idx); //신규 방 생성 </span><br><span class="line">            console.log(&apos;신규 결제 방 생성 : &apos;+r_idx);</span><br><span class="line">            console.log(&apos;현재 결제 방 배열 : &apos;, startroom);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //7-4</span><br><span class="line">        startRoomIdx = startroom.indexOf(&apos;startroom&apos;+r_idx);</span><br><span class="line">        socket.join(startroom[startRoomIdx], function()&#123;</span><br><span class="line">            console.log(startRoomIdx+&apos;번 운행시작 룸에 조인됨&apos;);</span><br><span class="line">            io.to(startroom[startRoomIdx]).emit(&apos;startroom join result&apos;, startRoomIdx+&apos;번 운행시작방에 조인되었습니다.&apos;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    //8</span><br><span class="line">    socket.on(&apos;start journey&apos;, function(r_idx)&#123;</span><br><span class="line">        console.log(&apos;start journey 이벤트 리슨 : &apos;, r_idx);</span><br><span class="line">        io.to(startroom[startRoomIdx]).emit(&apos;go driving page&apos;, r_idx);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//3</span><br><span class="line">http.listen(3000, function()&#123;</span><br><span class="line">    console.log(&apos;연차 노드 서버 연결 시작&apos;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="carpoollistClient-jsp-1"><a href="#carpoollistClient-jsp-1" class="headerlink" title="carpoollistClient.jsp"></a>carpoollistClient.jsp</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot; pageEncoding=&quot;UTF-8&quot;%&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;탑승자 | 예약 목록&lt;/title&gt;</span><br><span class="line">&lt;script src=&quot;http://localhost:3000/socket.io/socket.io.js&quot;&gt;&lt;/script&gt;  //4</span><br><span class="line">&lt;script src=&quot;https://code.jquery.com/jquery-1.12.4.js&quot;&gt;&lt;/script&gt;      //5     </span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;button class=&quot;btn btn-primary&quot; onclick=&quot;drivingStart(r_idx)&quot; &gt;탑승대기&lt;/button&gt;  </span><br><span class="line"></span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    var socket = io(&apos;http://localhost:3000/&apos;);                        //6</span><br><span class="line"></span><br><span class="line">    //9</span><br><span class="line">    function drivingStart (r_idx) &#123;  </span><br><span class="line">    //소켓 연결 </span><br><span class="line">          console.log(&apos;소켓 방 생성을 위한 r_idx &apos;+r_idx);</span><br><span class="line">          socket.emit(&apos;join start room&apos;, r_idx);  //9-1</span><br><span class="line">          socket.on(&apos;startroom join result&apos;, function(msg)&#123;</span><br><span class="line">             console.log(msg);</span><br><span class="line">          &#125;);</span><br><span class="line">          </span><br><span class="line">          alert(&apos;운전자가 운행 시작 버튼을 누르면 자동으로 운행이 시작됩니다. 조금만 기다려주세요!&apos;);</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      //10</span><br><span class="line">      //운행중 page 로 redirect         </span><br><span class="line">      socket.on(&apos;go driving page&apos;, function(r_idx)&#123;</span><br><span class="line">         console.log(&apos;탑승자님, 운행 중 페이지로 이동하실게요 &apos;+r_idx);</span><br><span class="line">         setTimeout(function()&#123;</span><br><span class="line">            window.location.href=&quot;http://localhost:8080/passenger/passengerDriving.jsp?r_idx=&quot;+r_idx;</span><br><span class="line">         &#125;, 3000);</span><br><span class="line">      &#125;);  </span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h4 id="carpoollistDriver-jsp-1"><a href="#carpoollistDriver-jsp-1" class="headerlink" title="carpoollistDriver.jsp"></a>carpoollistDriver.jsp</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot; pageEncoding=&quot;UTF-8&quot;%&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;운전자 | 카풀 목록&lt;/title&gt;</span><br><span class="line">&lt;script src=&quot;http://localhost:3000/socket.io/socket.io.js&quot;&gt;&lt;/script&gt;          //4</span><br><span class="line">&lt;script src=&quot;https://code.jquery.com/jquery-1.12.4.js&quot;&gt;&lt;/script&gt;              //5</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;button class=&quot;btn btn-primary&quot; id=&quot;driving&quot; onclick=&quot;drivingStart(r_idx)&quot; &gt;운행시작&lt;/button&gt;  </span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    var socket = io(&apos;http://localhost:3000/&apos;);                                 //6                  </span><br><span class="line"></span><br><span class="line">    //11</span><br><span class="line">    //운행 시작          </span><br><span class="line">    function drivingStart(r_idx) &#123;</span><br><span class="line">    //소켓 연결 </span><br><span class="line">        console.log(&apos;소켓 연결을 위한 r_idx &apos;+r_idx);        </span><br><span class="line">        socket.emit(&apos;join start room&apos;, r_idx); </span><br><span class="line">        socket.on(&apos;startroom join result&apos;, function(msg)&#123;</span><br><span class="line">           console.log(msg);</span><br><span class="line">        &#125;);</span><br><span class="line">        </span><br><span class="line">      if(confirm(&apos;운행을 시작하시겠습니까?&apos;)) &#123;      </span><br><span class="line">         socket.emit(&apos;start journey&apos;, r_idx);</span><br><span class="line">      &#125;; </span><br><span class="line">      </span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">    //12</span><br><span class="line">    //운행중 page 로 redirect               </span><br><span class="line">    socket.on(&apos;go driving page&apos;, function(r_idx)&#123;</span><br><span class="line">        console.log(&apos;운전자님, 운행 중 페이지로 이동하실게요 &apos;+r_idx);</span><br><span class="line">        setTimeout(function()&#123;</span><br><span class="line">          window.location.href=&quot;http://localhost:8080/driver/driverCarpool/driverDriving.jsp?r_idx=&quot;+r_idx;</span><br><span class="line">        &#125;, 3000);</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><ol><li>carpoollistClient.jsp : 탑승자 페이지에서 소켓으로 연결이 되고(//6) 새로 추가된 탑승 대기 버튼을 클릭하면 onclick 이벤트가 발생하게 된다. 이 때, 매개변수로 전해지는 r_idx 는 탑승자와 운전자 단 둘만 공유하는 예약번호이다. </li><li>carpoollistClient.jsp : 버튼 클릭 이벤트의 결과 실행되는 drivingStart (r_idx) 함수를 보자. 이 함수의 경우, 전달받은 r_idx 로 ‘join start room’ 이벤트를 발생시키고 있다(//9-1). 이 이벤트는 <code>server.js</code>에서 미리 정의된 이벤트 리스너에 의해 콜백함수도 응답을 받게 된다. </li><li>carpoollistDriver.jsp : 운전자 역시 탑승자와 비슷한 과정을 거친다. </li><li>server.js : 서버 단에서는 소켓 연결이 되자마자 방 배열을 하나 생성하도록 한다(//7-1). join start room 이벤트 리스너에 의해 룸 생성 및 조인 과정이 진행된다. 먼저 r_idx라는 번호의 방이 존재하는지 확인하는 작업이 필요하다. 만약 r_idx번의 방이 이미 존재한다면 //7-3 의 과정을 통과하고 그냥 join() 을 통해 룸에 조인시키면 되고 만약 방이 존재하지 않는다면 새롭게 해당 번호에 맞는 방을 만들어서 배열에 넣어줄 필요가 있다. 이렇게 되면 r_idx 를 공유하는 단 두명만 방에 조인되고 //7-4와 같이 방에 조인된 두 사용자만 조인된 룸에 대한 정보를 받는다. 물론 이 정보는 콘솔창에만 찍히므로 사용자들에게는 그에 맞는 알림이나 정보를 표시해준다. </li><li>carpoollistDriver.jsp : 운행 시작 버튼은 운전자에게만 있다. 따라서 운전자가 운행 시작 버튼을 누를때 ‘start journey’ 이벤트를 발생시켜 다음 흐름을 이어갈 수 있도록 처리한다. </li><li>server.js : 역시 미리 정의된 ‘start journey’ 이벤트 리스너에 의해 이벤트가 처리된다. 이 곳에서는 r_idx 번 startroom 에 조인되어있는 두 사용자에게 ‘go driving page’ 이벤트를 발생시킨다. </li><li>carpoollistClient.jsp &amp; carpoollistDriver.jsp : 두 사용자는 미리 정의해준 ‘go driving page’ 이벤트 리스너를 통해 이벤트에 대한 행동을 처리한다. 여기서는 setTimeout() 콜백함수로 정의된 내용에 따라 다음 페이지로 redirect 처리가 된다. 즉, 탑승자와 운전자의 화면이 동시에 다음 화면으로 redirect 된다.<br><br><br></li></ol><h2 id="탑승자가-운행-종료-버튼을-누르면-탑승자와-운전자-모두-결제-페이지로-이동"><a href="#탑승자가-운행-종료-버튼을-누르면-탑승자와-운전자-모두-결제-페이지로-이동" class="headerlink" title="탑승자가 운행 종료 버튼을 누르면 탑승자와 운전자 모두 결제 페이지로 이동"></a>탑승자가 운행 종료 버튼을 누르면 탑승자와 운전자 모두 결제 페이지로 이동</h2><p>운행종료버튼을 누르는 것 역시 비슷한 과정으로 진행된다. 탑승자와 운전자는 페이지 로드와 동시에 r_idx 로 만든 room 에 조인이 됨. </p><ol><li>탑승자에게만 있는 운행종료 버튼을 누르면 이벤트가 발생 </li><li>미리 서버에 정의해둔 이벤트 리스너에 의해 콜백함수로 페이지 이동 이벤트 전달 </li><li>탑승자와 운전자 모두 이벤트 리스너를 통해 결제 페이지로 동시에 이동하게 됨<br><br><br></li></ol><h4 id="server-js-2"><a href="#server-js-2" class="headerlink" title="server.js"></a>server.js</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">var app = require(&apos;express&apos;)();</span><br><span class="line">var http = require(&apos;http&apos;).createServer(app);</span><br><span class="line">var io = require(&apos;socket.io&apos;)(http);</span><br><span class="line"></span><br><span class="line">app.get(&apos;/&apos;, function(req, res)&#123;&#125;);</span><br><span class="line">  </span><br><span class="line">io.on(&apos;connection&apos;, function(socket)&#123;</span><br><span class="line">    console.log(&apos;클라이언트 연결됨. 소켓 id는 : &apos;, socket.id);</span><br><span class="line"></span><br><span class="line">    socket.on(&apos;disconnect&apos;, function()&#123;</span><br><span class="line">        console.log(&apos;사용자 연결 종료 ::&apos;, socket.id);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    //운행 도착 room </span><br><span class="line">    var room = new Array();</span><br><span class="line">    var roomIdx;</span><br><span class="line"></span><br><span class="line">    //운행 종료 시 room join 처리</span><br><span class="line">    socket.on(&apos;join room&apos;, function(r_idx)&#123;</span><br><span class="line">        console.log(&apos;r_idx 로 룸 조인 &apos;, r_idx);</span><br><span class="line">        </span><br><span class="line">        roomIdx = room.indexOf(&apos;room&apos;+r_idx);</span><br><span class="line">        if(r_idx != null  &amp;&amp; roomIdx == -1) &#123; //만약 r_idx 번 방이 존재하지 않다면,</span><br><span class="line">            room.push(&apos;room&apos;+r_idx); //신규 방 생성 </span><br><span class="line">            console.log(&apos;신규 방 생성 : &apos;+r_idx);</span><br><span class="line">            console.log(&apos;현재 방 배열 : &apos;, room);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        roomIdx = room.indexOf(&apos;room&apos;+r_idx);</span><br><span class="line">        socket.join(room[roomIdx], function()&#123;</span><br><span class="line">            console.log(roomIdx+&apos;번 운행 종료룸에 조인됨&apos;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    socket.on(&apos;arrive&apos;, function(r_idx)&#123;</span><br><span class="line">        console.log(&apos;arrive 이벤트 리슨&apos;);</span><br><span class="line">        io.to(room[roomIdx]).emit(&apos;redirect&apos;, r_idx);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">http.listen(3000, function()&#123;</span><br><span class="line">    console.log(&apos;연차 노드 서버 연결 시작&apos;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="passengerDriving-jsp"><a href="#passengerDriving-jsp" class="headerlink" title="passengerDriving.jsp"></a>passengerDriving.jsp</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot; pageEncoding=&quot;UTF-8&quot;%&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;탑승자 | 운행중 &lt;/title&gt;</span><br><span class="line">&lt;script src=&quot;http://localhost:3000/socket.io/socket.io.js&quot;&gt;&lt;/script&gt;  </span><br><span class="line">&lt;script src=&quot;https://code.jquery.com/jquery-1.12.4.js&quot;&gt;&lt;/script&gt;           </span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div class=&quot;container&quot;&gt;</span><br><span class="line">      &lt;div id=&quot;driving&quot;&gt;</span><br><span class="line">         &lt;h1&gt;YCAR&lt;/h1&gt;</span><br><span class="line">         &lt;img src=&quot;static/images/logo_yeoncha.png&quot; id=&quot;ycarLogo&quot;&gt;</span><br><span class="line">         &lt;h5&gt;탑승자분, 카풀 운행이 시작되었습니다.&lt;/h5&gt;</span><br><span class="line">         &lt;h5&gt;운행종료시 버튼을 눌러주세요!&lt;/h5&gt;&lt;br&gt;</span><br><span class="line">         &lt;div id=&quot;map_div&quot;&gt;&lt;/div&gt;</span><br><span class="line">         &lt;input type=&quot;hidden&quot; id=&quot;startlon&quot; value=&quot;&quot;&gt;</span><br><span class="line">        &lt;input type=&quot;hidden&quot; id=&quot;startlat&quot; value=&quot;&quot;&gt;</span><br><span class="line">        &lt;input type=&quot;hidden&quot; id=&quot;endlon&quot; value=&quot;&quot;&gt;</span><br><span class="line">        &lt;input type=&quot;hidden&quot; id=&quot;endlat&quot; value=&quot;&quot;&gt;</span><br><span class="line">        &lt;button id=&quot;arrBtn&quot; class=&quot;btn btn-primary rsbbtn&quot; href=&quot;#&quot;&gt;운행종료&lt;/button&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">   &lt;/div&gt; </span><br><span class="line"></span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    var socket = io(&apos;http://localhost:3000/&apos;);                      </span><br><span class="line"></span><br><span class="line">     $(document).ready(function()&#123;</span><br><span class="line">       var socket = io(&apos;http://localhost:3000/&apos;);</span><br><span class="line"></span><br><span class="line">      var r_idx = document.location.search.substring(&apos;1&apos;).split(&apos;=&apos;)[1];</span><br><span class="line">         console.log(&apos;r_idx 확인 : &apos;, r_idx);  </span><br><span class="line"></span><br><span class="line">         socket.emit(&apos;join room&apos;, r_idx); </span><br><span class="line"></span><br><span class="line">         $(&apos;#arrBtn&apos;).on(&apos;click&apos;, function()&#123;</span><br><span class="line">            socket.emit(&apos;arrive&apos;, r_idx);</span><br><span class="line">            console.log(&apos;arrive 이벤트 발생&apos;);</span><br><span class="line">         &#125;)</span><br><span class="line">   </span><br><span class="line">         socket.on(&apos;redirect&apos;, function(r_idx)&#123;</span><br><span class="line">            console.log(&apos;redirect 리슨 &apos;, r_idx);</span><br><span class="line">            setTimeout(function()&#123;</span><br><span class="line">               window.location.href=&quot;http://localhost:8080/passenger/payindex.jsp?r_idx=&quot;+r_idx;</span><br><span class="line">            &#125;, 2000);</span><br><span class="line">         &#125;); </span><br><span class="line">      &#125;);  </span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h4 id="driverDriving-jsp"><a href="#driverDriving-jsp" class="headerlink" title="driverDriving.jsp"></a>driverDriving.jsp</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot; pageEncoding=&quot;UTF-8&quot;%&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;운전자 | 운행중&lt;/title&gt;</span><br><span class="line">&lt;script src=&quot;http://localhost:3000/socket.io/socket.io.js&quot;&gt;&lt;/script&gt;         </span><br><span class="line">&lt;script src=&quot;https://code.jquery.com/jquery-1.12.4.js&quot;&gt;&lt;/script&gt;             </span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div class=&quot;container&quot;&gt;</span><br><span class="line">      &lt;div id=&quot;driving&quot;&gt;</span><br><span class="line">          &lt;h1&gt;YCAR&lt;/h1&gt;</span><br><span class="line">          &lt;img src=&quot;&lt;c:url value=&apos;/staticD/images/logo_yeoncha.png&apos;/&gt;&quot; id=&quot;ycarLogo&quot;&gt;</span><br><span class="line">          &lt;h5&gt;운전자분, 카풀 운행이 시작되었습니다.&lt;/h5&gt;</span><br><span class="line">          &lt;h5&gt;탑승자분이 버튼을 누르면 운행이 종료됩니다!&lt;/h5&gt;&lt;br&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;div id=&quot;map_div&quot;&gt;&lt;/div&gt;</span><br><span class="line">      &lt;input type=&quot;hidden&quot; id=&quot;startlon&quot; value=&quot;&quot;&gt;</span><br><span class="line">      &lt;input type=&quot;hidden&quot; id=&quot;startlat&quot; value=&quot;&quot;&gt;</span><br><span class="line">      &lt;input type=&quot;hidden&quot; id=&quot;endlon&quot; value=&quot;&quot;&gt;</span><br><span class="line">      &lt;input type=&quot;hidden&quot; id=&quot;endlat&quot; value=&quot;&quot;&gt;</span><br><span class="line">  &lt;/div&gt; </span><br><span class="line"></span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    var socket = io(&apos;http://localhost:3000/&apos;);                                                 </span><br><span class="line"></span><br><span class="line">    $(document).ready(function() &#123;</span><br><span class="line">        </span><br><span class="line">        //이전 url 에서 r_idx 받아오기</span><br><span class="line">        var params = document.location.search.substring(&apos;1&apos;);</span><br><span class="line">        console.log(&apos;params 확인 : &apos;, params);</span><br><span class="line"></span><br><span class="line">        var parameter = params.split(&apos;=&apos;);</span><br><span class="line">        console.log(&apos;parameter 확인 : &apos;, parameter[0] + &apos; / 이글루 / &apos; + parameter[1]);</span><br><span class="line">        </span><br><span class="line">        var r_idx = parameter[1];</span><br><span class="line">        console.log(&apos;r_idx 확인 : &apos;, r_idx);</span><br><span class="line">        </span><br><span class="line">        socket.emit(&apos;join room&apos;, r_idx);</span><br><span class="line">        </span><br><span class="line">        socket.on(&apos;redirect&apos;, function(r_idx) &#123;</span><br><span class="line">            console.log(&apos;redirect 리슨 &apos;, r_idx);</span><br><span class="line">            setTimeout(function() &#123;</span><br><span class="line">                window.location.href = &quot;http://localhost:8080/driver/paymentAndReview/payment/driverPaychk.jsp?r_idx=&quot; + r_idx;</span><br><span class="line">            &#125;, 3000);</span><br><span class="line">        &#125;);      </span><br><span class="line">    &#125;);</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><br><br></p><h2 id="탑승자가-결제에-성공하면-탑승자와-운전자-모두-결제-내역-확인-페이지로-이동-결제-데이터의-공유"><a href="#탑승자가-결제에-성공하면-탑승자와-운전자-모두-결제-내역-확인-페이지로-이동-결제-데이터의-공유" class="headerlink" title="탑승자가 결제에 성공하면 탑승자와 운전자 모두 결제 내역 확인 페이지로 이동 : 결제 데이터의 공유"></a>탑승자가 결제에 성공하면 탑승자와 운전자 모두 결제 내역 확인 페이지로 이동 : 결제 데이터의 공유</h2><p>위의 결과 결제 페이지로 이동을 하게되면 탑승자의 결제 진행이 시작된다. 카카오, 토스, 일반카드 결제 중 탑승자는 한 가지 방법을 선택하고, 결제에 성공을 하면 탑승자와 운전자 모두 결제 내열을 확인할 수 있게 된다. </p><ol><li>탑승자의 결제 성공 </li><li>server.js 에서 확인 후 이벤트 리스너 콜백함수로 결제 데이터 공유 및 페이지 전환 </li><li>탑승자와 운전자 동시에 결제 내역 확인</li></ol><h4 id="server-js-3"><a href="#server-js-3" class="headerlink" title="server.js"></a>server.js</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">var app = require(&apos;express&apos;)();</span><br><span class="line">var http = require(&apos;http&apos;).createServer(app);</span><br><span class="line">var io = require(&apos;socket.io&apos;)(http);</span><br><span class="line"></span><br><span class="line">app.get(&apos;/&apos;, function(req, res)&#123;&#125;);</span><br><span class="line">  </span><br><span class="line">io.on(&apos;connection&apos;, function(socket)&#123;</span><br><span class="line">    console.log(&apos;클라이언트 연결됨. 소켓 id는 : &apos;, socket.id);</span><br><span class="line"></span><br><span class="line">    socket.on(&apos;disconnect&apos;, function()&#123;</span><br><span class="line">        console.log(&apos;사용자 연결 종료 ::&apos;, socket.id);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">     //결제 room </span><br><span class="line">    var payroom = new Array();</span><br><span class="line">    var payRoomIdx;</span><br><span class="line"></span><br><span class="line">    //결제 완료시 room join 처리 </span><br><span class="line">    socket.on(&apos;join payroom&apos;, function(r_idx)&#123;</span><br><span class="line">        console.log(&apos;r_idx 로 결제 룸 조인 &apos;, r_idx);</span><br><span class="line">                </span><br><span class="line">        payRoomIdx = payroom.indexOf(&apos;payroom&apos;+r_idx);</span><br><span class="line">        if(r_idx != null  &amp;&amp; payRoomIdx == -1) &#123; //만약 r_idx 번 방이 존재하지 않다면,</span><br><span class="line">            payroom.push(&apos;payroom&apos;+r_idx); //신규 방 생성 </span><br><span class="line">            console.log(&apos;신규 결제 방 생성 : &apos;+r_idx);</span><br><span class="line">            console.log(&apos;현재 결제 방 배열 : &apos;, payroom);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        payRoomIdx = payroom.indexOf(&apos;payroom&apos;+r_idx);</span><br><span class="line">        socket.join(payroom[payRoomIdx], function()&#123;</span><br><span class="line">            console.log(payRoomIdx+&apos;번 결제 룸에 조인됨&apos;);</span><br><span class="line">            io.to(payroom[payRoomIdx]).emit(&apos;payroom result&apos;, payRoomIdx+&apos;번 결제 방에 조인되었습니다.&apos;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    socket.on(&apos;send payinfo&apos;, function(</span><br><span class="line">        payidx, paydate, d_commute, d_distance, d_fee, paymethod, </span><br><span class="line">        d_starttime, d_startpoint, d_endtime, d_endpoint</span><br><span class="line">    )&#123;</span><br><span class="line">        console.log(&apos;payinfo 이벤트 리슨 &apos;, d_endpoint);</span><br><span class="line">        io.to(payroom[payRoomIdx]).emit(&apos;receive pay result&apos;, </span><br><span class="line">        payidx, paydate, d_commute, d_distance, d_fee, paymethod, </span><br><span class="line">        d_starttime, d_startpoint, d_endtime, d_endpoint);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">http.listen(3000, function()&#123;</span><br><span class="line">    console.log(&apos;연차 노드 서버 연결 시작&apos;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="success-jsp-탑승자"><a href="#success-jsp-탑승자" class="headerlink" title="success.jsp (탑승자)"></a>success.jsp (탑승자)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot; pageEncoding=&quot;UTF-8&quot;%&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;탑승자 | 결제성공&lt;/title&gt;</span><br><span class="line">&lt;script src=&quot;http://localhost:3000/socket.io/socket.io.js&quot;&gt;&lt;/script&gt;  </span><br><span class="line">&lt;script src=&quot;https://code.jquery.com/jquery-1.12.4.js&quot;&gt;&lt;/script&gt;        </span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    var socket = io(&apos;http://localhost:3000/&apos;);  </span><br><span class="line"></span><br><span class="line">    var r_idx = paramArray0[1];</span><br><span class="line">console.log(&apos;toss pay success 처리 시작&apos;, r_idx);</span><br><span class="line"></span><br><span class="line">//r_idx 방 조인 : 유니크 키인 r_idx 이용 </span><br><span class="line">socket.emit(&apos;join payroom&apos;, r_idx);</span><br><span class="line"></span><br><span class="line">//listener : payroom result</span><br><span class="line">socket.on(&apos;payroom result&apos;, function(msg)&#123;</span><br><span class="line">console.log(msg);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //...결제 성공 시 실행되는 매서드 중략...</span><br><span class="line"></span><br><span class="line">     //소켓서버 걸쳐 운전자 페이지로 데이터 전송</span><br><span class="line">    socket.emit(&apos;send payinfo&apos;, </span><br><span class="line">      data.payidx,</span><br><span class="line">      data.paydate,</span><br><span class="line">      data.d_commute,</span><br><span class="line">      data.d_distance,</span><br><span class="line">      data.d_fee,</span><br><span class="line">      data.paymethod,</span><br><span class="line">      data.d_starttime,</span><br><span class="line">      data.d_startpoint,</span><br><span class="line">      data.d_endtime,</span><br><span class="line">      data.d_endpoint</span><br><span class="line">    );</span><br><span class="line">    </span><br><span class="line">    socket.on(&apos;receive pay result&apos;, function(</span><br><span class="line">    payidx, paydate, d_commute, d_distance, d_fee, paymethod, </span><br><span class="line">        d_starttime, d_startpoint, d_endtime, d_endpoint</span><br><span class="line">    )&#123;</span><br><span class="line">      console.log(&apos;운전자에게 결제 정보 전달완료&apos;, payidx);</span><br><span class="line">      //탑승자 페이지 갱신 </span><br><span class="line">      setTimeout(function()&#123;</span><br><span class="line">        //일정 시간 후 : 탑승자 후기 작성 페이지로 이동 </span><br><span class="line">        window.location.href=&apos;http://localhost:8080/passenger/review/passengerWrite.jsp?payidx=&apos;+data.payidx;</span><br><span class="line">      &#125;, 10000);</span><br><span class="line">    &#125;);</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h4 id="driverPaychk-jsp-운전자"><a href="#driverPaychk-jsp-운전자" class="headerlink" title="driverPaychk.jsp (운전자)"></a>driverPaychk.jsp (운전자)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot; pageEncoding=&quot;UTF-8&quot;%&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;운전자 | 입금성공&lt;/title&gt;</span><br><span class="line">&lt;script src=&quot;http://localhost:3000/socket.io/socket.io.js&quot;&gt;&lt;/script&gt;          </span><br><span class="line">&lt;script src=&quot;https://code.jquery.com/jquery-1.12.4.js&quot;&gt;&lt;/script&gt;              </span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    var socket = io(&apos;http://localhost:3000/&apos;);                                                 </span><br><span class="line"></span><br><span class="line">    var r_idx = document.location.search.substring(&apos;1&apos;).split(&apos;=&apos;)[1];</span><br><span class="line">    console.log(&apos;r_idx 확인 : &apos;, r_idx);  </span><br><span class="line"></span><br><span class="line">    //r_idx 방 조인 : 유니크 키인 r_idx 이용 </span><br><span class="line">    socket.emit(&apos;join payroom&apos;, r_idx);</span><br><span class="line"></span><br><span class="line">    $(document).ready(function()&#123;</span><br><span class="line"></span><br><span class="line">      //listener : payroom result</span><br><span class="line">      socket.on(&apos;payroom result&apos;, function(msg)&#123;</span><br><span class="line">        console.log(msg);</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      //listener : receive info </span><br><span class="line">      socket.on(&apos;receive pay result&apos;, </span><br><span class="line">        function(payidx, paydate, d_commute, d_distance, d_fee, paymethod, </span><br><span class="line">          d_starttime, d_startpoint, d_endtime, d_endpoint)&#123; </span><br><span class="line">        console.log(&apos;driver 페이지야, 값들 들어오니?&apos;, d_startpoint);  </span><br><span class="line">        </span><br><span class="line">        var result = &apos;&apos;;</span><br><span class="line">        result += &apos;&lt;h1&gt;입금 확인&lt;/h1&gt;&lt;br&gt;&apos;;</span><br><span class="line">        result += &apos;&lt;table class=&quot;table&quot;&gt;&apos;;</span><br><span class="line">        result += &apos;&lt;thead&gt;&lt;tr&gt;&lt;th scope=&quot;col&quot;&gt;항목&lt;/th&gt;&lt;th scope=&quot;col&quot;&gt;내용&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&apos;;</span><br><span class="line">        result += &apos;&lt;tbody&gt;&apos;;</span><br><span class="line">        result += &apos;&lt;tr&gt;&lt;th scope=&quot;row&quot;&gt;날짜&lt;/th&gt;&lt;td id=&quot;d_date&quot;&gt;&apos;+paydate+&apos;&lt;/td&gt;&lt;/tr&gt;&apos;;</span><br><span class="line">        result += &apos;&lt;tr&gt;&lt;th scope=&quot;row&quot;&gt;출근/퇴근&lt;/th&gt;&lt;td id=&quot;commuteType&quot;&gt;&apos;+d_commute+&apos;&lt;/td&gt;&lt;/tr&gt;&apos;;</span><br><span class="line">        result += &apos;&lt;tr&gt;&lt;th scope=&quot;row&quot;&gt;총 운행거리&lt;/th&gt;&lt;td id=&quot;d_distance&quot;&gt;&apos;+d_distance+&apos; km&lt;/td&gt;&lt;/tr&gt;&apos;;</span><br><span class="line">        result += &apos;&lt;tr&gt;&lt;th scope=&quot;row&quot;&gt;총 금액&lt;/th&gt;&lt;td id=&quot;d_amount&quot;&gt;&apos;+d_fee+&apos;원 &lt;/td&gt;&lt;/tr&gt;&apos;;</span><br><span class="line">        result += &apos;&lt;tr&gt;&lt;th scope=&quot;row&quot;&gt;결제수단&lt;/th&gt;&lt;td id=&quot;d_method&quot;&gt;&apos;+paymethod+&apos;&lt;/td&gt;&lt;/tr&gt;&apos;;</span><br><span class="line">        result += &apos;&lt;tr&gt;&lt;th scope=&quot;row&quot;&gt;출발시간/출발지&lt;/th&gt;&lt;td id=&quot;d_stime&quot;&gt;&apos;+d_starttime+&apos; / &apos;+d_startpoint+&apos;&lt;/td&gt;&lt;/tr&gt;&apos;;</span><br><span class="line">        result += &apos;&lt;tr&gt;&lt;th scope=&quot;row&quot;&gt;도착시간/도착지&lt;/th&gt;&lt;td id=&quot;d_etime&quot;&gt;&apos;+d_endtime+&apos; / &apos;+d_endpoint+&apos;&lt;/td&gt;&lt;/tr&gt;&apos;;</span><br><span class="line">        result += &apos;&lt;/tbody&gt;&apos;;</span><br><span class="line">        result += &apos;&lt;/table&gt;&apos;;</span><br><span class="line">        </span><br><span class="line">        $(&apos;#pay-success-div&apos;).html(result);</span><br><span class="line"></span><br><span class="line">        //운전자 페이지 갱신 </span><br><span class="line">        setTimeout(function()&#123;</span><br><span class="line">          //일정 시간 후 : 탑승자 후기 작성 페이지로 이동 </span><br><span class="line">          window.location.href=&apos;http://localhost:8080/driver/paymentAndReview/review/driverWrite.jsp?payidx=&apos;+payidx;</span><br><span class="line">        &#125;, 10000);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><br><br></p><h4 id="정리"><a href="#정리" class="headerlink" title="정리"></a>정리</h4><ul><li>결국, 클라이언트와 서버단에서 각각 on(), emit() 통해서 이벤트 발생과 이벤트 리스너를 잘 정의해준다면, 데이터를 공유하는 것은 채팅방의 형태가 되었던, 페이지 동시 전환이던 크게 다르지 않다. </li><li>특정 사용자들끼리만 데이터가 공유될 수 있도록 room 을 이용한다.<br><br><br></li></ul><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://thebook.io/006982/" target="_blank" rel="noopener">Node.js 교과서</a></li><li><a href="https://medium.com/wasd/node-js%EC%99%80-socket-io%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%9C-%EC%B1%84%ED%8C%85-%EA%B5%AC%ED%98%84-1-cb215954847b" target="_blank" rel="noopener">Node.js와 Socket.io를 이용한 채팅 구현 (1) ~ (3)</a></li></ul>]]></content:encoded>
      
      <comments>https://miniminis.github.io/2019/10/21/node-socket-ycar-example-1/#disqus_thread</comments>
    </item>
    
    <item>
      <title>REST에 대한 간단한 정리</title>
      <link>https://miniminis.github.io/2019/10/19/architecture-01/</link>
      <guid>https://miniminis.github.io/2019/10/19/architecture-01/</guid>
      <pubDate>Sat, 19 Oct 2019 08:59:24 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;&lt;a href=&quot;https://bcho.tistory.com/953?category=252770&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;조대협님의 블로그&lt;/a&gt;를 통해서 REST 구조를 복습하고 있다. 워낙 유명한 블로그라서 많
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p><a href="https://bcho.tistory.com/953?category=252770" target="_blank" rel="noopener">조대협님의 블로그</a>를 통해서 REST 구조를 복습하고 있다. 워낙 유명한 블로그라서 많이들 아실 것 같다. 블로그의 글들이 친절하고 자세하게 설명되어있어서 이해하기에 좋은 것 같다.<br><br><br></p><h2 id="REST-란"><a href="#REST-란" class="headerlink" title="REST 란?"></a>REST 란?</h2><p>Representational State Transfer. 네트워크상에서 클라이언트와 서버가 통신하는 방법의 일종으로 현 소프트웨어가 가지고 있는 이미지, 텍스트 등의 자원을 HTTP URI 에 명시하고 이를 HTTP method 를 통해 처리하는 아키텍쳐 방식을 말함<br><br><br>장점 : </p><ol><li>서버와 클라이언트가 완전히 분리된 구조를 가질 수 있어서 협업에 좋음<ul><li>따라서 웹, 안드로이드, ios 등 멀티 플랫폼에서 하나의 rest 서버를 이용해 서비스 할 수 있음</li><li>여러 서비스에서 생길 수 있는 디자인 적인 문제를 최소화 함 </li></ul></li><li>기존 웹 기술과 http 프로토콜을 사용하므로 REST api 를 위해 따로 인프라를 구축할 필요가 없음 </li><li>REST api 메시지가 의도하는 바가 명확히 표시되어 있어서 의도하는 바를 쉽게 파악할 수 있음 <br></li></ol><p>단점 :</p><ol><li>사용할 수 있는 메서드가 4개로 한정적임 </li><li>구형 브라우저에서는 지원되지 않는 메서드가 있음 : PUT or DELETE 등<br><br><br></li></ol><h2 id="구성요소"><a href="#구성요소" class="headerlink" title="구성요소"></a>구성요소</h2><p>예시 : <code>blackgoat 라는 아이디로 회원가입 요청 == blackgoat라는 사용자를 생성한다!</code></p><ol><li>리소스 : 사용자 </li><li>메서드 : HTTP POST </li><li>메시지 : id : blackgoat </li></ol><p>REST 형태로는 다음과 같음.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">HTTP POST,    http://server-address/users</span><br><span class="line">&#123;&quot;users&quot; : &#123;&quot;id&quot; : &quot;blackgoat&quot;&#125;&#125;</span><br></pre></td></tr></table></figure><p><br><br></p><h2 id="특징-6가지"><a href="#특징-6가지" class="headerlink" title="특징 6가지"></a>특징 6가지</h2><ol><li>server-client <ul><li>자원을 가지고 있는 서버, 자원을 요청하는 클라이언트로 분리된 구조 </li><li>클라이언트 : 사용자 인증, 캐시 및 쿠키 관리 등 직접 관리하고 책임짐</li><li>서버: 비즈니스 로직을 구성 및 처리</li></ul></li><li>stateless<ul><li>클라이언트의 상태를 서버측에서 유지/저장 하지 않는다는 의미</li><li>서버는 사용자의 인증 및 캐시 등등을 신경쓰지 않고 저장하지 않음. 비즈니스 로직만 구성하면 됨. </li><li>각각의 요청을 별개로 봄. 서로 연관성이 없음 –&gt; 의존성을 줄일 수 있음!</li></ul></li><li>cacheable <ul><li>http 가 가진 강력한 기능들을 이용할 수 있음 </li><li>캐싱기능 : last-modified or e-tag 이용하여 캐싱구현 가능 </li><li>대부분 클라이언트와 서버간 발생하는 트랜잭션은 select와 같은 조회의 트랜잭션임. 이 부분을 감안한다면 웹 클라이언트 사이드에서 캐시서버에 과거에 조회된 정보들을 가지고 있다면 rest server 측에서 트랜잭션이 발생하지 않기 때문에 보다 빠른 응답이 가능하고 성능면에서도 그게 훨씬 좋다. </li></ul></li><li>layered system<ul><li>rest 구조의 경우, 클라이언트는 서버의 주소 하나만을 호출한다. </li><li>서버의 경우는 비즈니스 로직을 구성인 api 앞에 여러 계층을 유동적으로 추가할 수 있다. </li><li>비즈니스 로직을 구성한 서버의 api 앞에 암호화, 보안, 로드밸런싱, 사용자 인증 등을 추가하여 구조를 유연하게 구성할 수 있다. </li><li>proxy 나 게이트 웨이 같은 네트워크 중간매체를 사용할 수도 있음 </li></ul></li><li>self-descriptive <ul><li>rest api 자체가 쉽고 명확하기 때문에 전달되는 리소스 uri 와 매서드만 보고서도 어떤 자원에 대해서 어떤 행위를 해야하는지 알 수 있으며 메시지 포멧 역시 json 을 이용해서 직관적으로 이해가 가능한 구조. </li></ul></li><li>uniform interface <ul><li>uri 로 지정한 자원에 대해서 통일되고 일관성있는 인터페이스를 수행한다. </li><li>http 표준에만 따르면 어떠한 기술이라도 사용 가능한 인터페이스임 </li><li>만약 rest api 가 http+json 으로 규정되어있다면, 어떠한 언어를 이용해 코딩을 한다고 해도 http+json 을 사용하고 있는 모든 플랫폼에서 적용 가능한 느슨한 결합형태<br><br><br></li></ul></li></ol><h2 id="Rest-api-에-맞춰서-uri-작성"><a href="#Rest-api-에-맞춰서-uri-작성" class="headerlink" title="Rest api 에 맞춰서 uri 작성 :"></a>Rest api 에 맞춰서 uri 작성 :</h2><ul><li><p>회원가입 : /users/ + post</p></li><li><p>회원리스트 : /users/ + get</p></li><li><p>회원 1명의 정보 : /users/{id} + get </p></li><li><p>회원수정 : /users/{id} + put </p></li><li><p>회원삭제 : /users/{id} + delete </p><br></li><li><p>로그인 : /auth/login</p></li><li><p>마이페이지 : /auth/me</p></li><li><p>로그아웃 : /auth/logout</p></li></ul>]]></content:encoded>
      
      <comments>https://miniminis.github.io/2019/10/19/architecture-01/#disqus_thread</comments>
    </item>
    
    <item>
      <title>기본개념 02 / DBMS, 스키마</title>
      <link>https://miniminis.github.io/2019/10/19/db-basic-02/</link>
      <guid>https://miniminis.github.io/2019/10/19/db-basic-02/</guid>
      <pubDate>Fri, 18 Oct 2019 16:20:35 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;나를 위해서, 간단한 개념정리가 필요할 또 다른 누군가를 위해서 진행 중인 DB 복습&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&quot;DBMS가-사용되기-이전과-이후&quot;&gt;&lt;a href=&quot;#DBMS가-사용되기-이전과-이후&quot; class=&quot;headerlink&quot; ti
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p>나를 위해서, 간단한 개념정리가 필요할 또 다른 누군가를 위해서 진행 중인 DB 복습<br><br></p><h2 id="DBMS가-사용되기-이전과-이후"><a href="#DBMS가-사용되기-이전과-이후" class="headerlink" title="DBMS가 사용되기 이전과 이후"></a>DBMS가 사용되기 이전과 이후</h2><ul><li>이전 : 프로그램 파일 내부에 데이터 구조나 데이터의 값을 포함하였다. </li><li>문제점 : 데이터의 구조나 값이 변경될때마다 프로그램을 다시 컴파일 해야했다. </li><li>이후 : DBMS가 데이터의 구조를 관리하고 데이터의 값은 데이터베이스에 저장함. 이 방식으로는 데이터의 구조나 값이 변경되어도 본 프로그램을 다시 컴파일 할 필요가 없음! <br></li></ul><h2 id="DBMS"><a href="#DBMS" class="headerlink" title="DBMS"></a>DBMS</h2><p>데이터 베이스와 사용자를 연결시켜주는 소프트웨어<br><br></p><h2 id="RDBMS"><a href="#RDBMS" class="headerlink" title="RDBMS"></a>RDBMS</h2><ul><li>관계형 데이터베이스 관리 시스템 / Relational DataBase Management System</li><li>대표적 : 오라클, Mysql <br></li></ul><h2 id="데이터베이스"><a href="#데이터베이스" class="headerlink" title="데이터베이스"></a>데이터베이스</h2><p>데이터가 저장되는 공간<br><br></p><h2 id="데이터베이스-모델"><a href="#데이터베이스-모델" class="headerlink" title="데이터베이스 모델"></a>데이터베이스 모델</h2><p>데이터가 저장되는 방법<br><br></p><h2 id="DDL-Data-Definition-Languague"><a href="#DDL-Data-Definition-Languague" class="headerlink" title="DDL (Data Definition Languague)"></a>DDL (Data Definition Languague)</h2><p>데이터 정의어<br>테이블 생성<br><br></p><h2 id="DML-Data-Manipulation-Language"><a href="#DML-Data-Manipulation-Language" class="headerlink" title="DML (Data Manipulation Language)"></a>DML (Data Manipulation Language)</h2><p>데이터 조작어<br><br></p><h2 id="DCL-Data-Control-Language"><a href="#DCL-Data-Control-Language" class="headerlink" title="DCL (Data Control Language)"></a>DCL (Data Control Language)</h2><p>사용자 권한 제어<br><br></p><h2 id="스키마"><a href="#스키마" class="headerlink" title="스키마"></a>스키마</h2><ul><li>개념스키마<ul><li>데이터가 저장될 전체 데이터베이스 테이블을 정의  </li></ul></li><li>외부스키마<ul><li>개념 스키마 중, 사용자에게 노출할 데이터들만 뽑아서 표현 : view 의 개념 </li></ul></li><li>내부(물리)스키마 <ul><li>물리적인 저장장치에 실제로 데이터/데이터베이스가 저장되는 방법을 표현</li><li>데이터의 자료형, 컬럼이름, 테이블 이름 등이 명확히 표현됨</li><li>인덱스, 데이터 레코드의 배치방법, 데이터 압축 등에 관해 표현됨  </li></ul></li></ul>]]></content:encoded>
      
      <comments>https://miniminis.github.io/2019/10/19/db-basic-02/#disqus_thread</comments>
    </item>
    
    <item>
      <title>기본개념 02 / 데이터베이스 용어정리, 키</title>
      <link>https://miniminis.github.io/2019/10/19/db-basic-01/</link>
      <guid>https://miniminis.github.io/2019/10/19/db-basic-01/</guid>
      <pubDate>Fri, 18 Oct 2019 16:08:49 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;오늘 데이터베이스에 대해 아주아주 기초적인 개념을 질문받았는데, 제대로 대답하지 못했다. 분명히 아는 내용인데도 제대로 대답하지 못해서 많이 속상했다. 다음에는 같은 실수가 반복되어서는 안되기에, 옛날에 공부했던 노트들을 뒤적이며, 정리 시이작!
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p>오늘 데이터베이스에 대해 아주아주 기초적인 개념을 질문받았는데, 제대로 대답하지 못했다. 분명히 아는 내용인데도 제대로 대답하지 못해서 많이 속상했다. 다음에는 같은 실수가 반복되어서는 안되기에, 옛날에 공부했던 노트들을 뒤적이며, 정리 시이작!<br><br><br></p><h2 id="용어정리"><a href="#용어정리" class="headerlink" title="용어정리"></a>용어정리</h2><ul><li>스키마 : 테이블 헤더 </li><li>인스턴스 </li><li>튜플 : 테이블의 행 </li><li>속성 : 테이블의 열 </li><li>릴레이션 : 테이블 </li></ul><p>이 때, 튜플의 순서, 속성의 순서는 상관 없음<br><br></p><h2 id="키"><a href="#키" class="headerlink" title="키"></a>키</h2><ul><li>튜플(테이블의 행, 테이블의 데이터들)을 구분하기 위해서 사용되는 속성(열, 혹은 컬럼값) 혹은 속성의 집합</li><li>각 튜플들은 서로 중복되어서는 안되기 때문에 반드시 하나 이상의 속성(열, 컬럼값)은 달라야 한다. </li><li>따라서 각 튜플들을 구분하는 속성은 유니크해야한다. –&gt; 키 값의 조건이 됨 <br></li></ul><ul><li>예시 : 마당서적<ul><li>고객 테이블 </li><li>주문 테이블 </li><li>책 테이블 </li></ul></li></ul><ol><li><p>슈퍼키 </p><ul><li>튜플(행 또는 데이터를)을 유일하게 식별할 수 있는 속성 혹은 속성의 집합. </li><li>고객 테이블의 고객번호 or 주민번호 </li></ul></li><li><p>후보키 </p><ul><li>튜플을 유일하게 식별할 수 있는 속성의 최소 집합 </li><li>주문 테이블 : </li><li>고객번호 - 한 고객이 여러개의 책 주문 할 수 있으니 안됨 </li><li>도서번호 - 여러 고객이 한 개의 책을 주문할 수 있으니 안됨 </li></ul></li><li><p>복합키</p><ul><li>결국 주문테이블의 후보키는 고객번호+도서번호 등 두개의 속성을 합한 복합키가 됨 </li></ul></li><li><p>기본키 PK </p><ul><li>후보키 중 대표 1개 </li><li>조건 : 1) unique - 각 튜플을 식별 2) not null 3) 변경이 없어야 함 </li></ul></li><li><p>외래키 FK</p><ul><li>다른 테이블과 관계를 맺을 때, 참조하게 되는 해당 테이블의 기본키를 말함.</li><li>특징 : 1) 테이블간 관계 표현.  2) 항상 기본키 참조 3) 참조하는 테이블의 기본키가 변경되면 참조키도 자동적으로 값이 변경됨 4) null과 중복 허용 5) 자기 자신을 참조할 수도 있음 6) 외래키는 결국 기본키의 일부 </li><li>조건 : unique // null &amp; 중복은 허용! </li></ul></li><li><p>대리키/인조키 </p><ul><li>대리키는 기본키가 1) 보안을 요구하여 노출되어선 안되거나 2) 여러개의 속성으로 이루어져 복잡한 경우에 일련번호와 같은 하나의 가상의 속성을 만들어서 기본키로 삼는 경우, 그 기본키를 바로 대리키라고 함. </li><li>주문 테이블 : (고객번호+도서번호)의 복합키를 쓰는 대신, (주문번호)라는 하나의 가상 속성을 만들어서 기본키로 채택함. </li></ul></li><li><p>대체키 </p><ul><li>후보키 중에서 기본키로 채택되지 않은 키를 말함 </li><li>고객 테이블 : 만약 고객번호가 PK라면, 주민번호가 대체키가 됨 </li></ul></li></ol><p><br><br></p><h2 id="개체-무결성-제약조건"><a href="#개체-무결성-제약조건" class="headerlink" title="개체 무결성 제약조건"></a>개체 무결성 제약조건</h2><p>테이블에 데이터를 삽입할 때, pk값의 경우는</p><ul><li>삽입 : 1) 동일값 2) null 값 허용 안됨 </li><li>수정 : 1) 동일값 2) null 값 허용 안됨 </li><li>삭제 : 특별한 확인작업 없이 즉시 수행함<br><br><br></li></ul><h2 id="참조-무결성-제약조건"><a href="#참조-무결성-제약조건" class="headerlink" title="참조 무결성 제약조건"></a>참조 무결성 제약조건</h2><ul><li>삽입 : 부모 튜플이 존재하면 자식 튜플 삽입 가능 </li><li>삭제 : 부모 튜플을 삭제하고자 할때, 자식 테이블도 같이 삭제할 수 있기 때문에 확인 작업이 수행된다. 아래와 같은 4가지 방법으로 처리를 할 수 있음. </li></ul><ol><li>restrict : 부모 테이블에서 튜플 삭제 시도시, 자식테이블이 참조하고 있다면  거부됨  </li><li>cascade : 부모 테이블에서 튜플 삭제 시, 관련된 자식 테이블 튜플도 같이 삭제 </li><li>default : 삭제 시도시, 자식 테이블 튜플에는 미리 설정해둔 default 값을 대체삽입함. </li><li>null : 삭제 시도시, 자식 테이블 튜플의 해당 속성값을 null 로 대체 삽입함. </li></ol>]]></content:encoded>
      
      <comments>https://miniminis.github.io/2019/10/19/db-basic-01/#disqus_thread</comments>
    </item>
    
    <item>
      <title>프로그래머스 Level 1 / 모의고사, 체육복</title>
      <link>https://miniminis.github.io/2019/10/17/algorithm-5/</link>
      <guid>https://miniminis.github.io/2019/10/17/algorithm-5/</guid>
      <pubDate>Thu, 17 Oct 2019 07:30:10 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;모의고사&quot;&gt;&lt;a href=&quot;#모의고사&quot; class=&quot;headerlink&quot; title=&quot;모의고사&quot;&gt;&lt;/a&gt;모의고사&lt;/h1&gt;&lt;h3 id=&quot;나의풀이&quot;&gt;&lt;a href=&quot;#나의풀이&quot; class=&quot;headerlink&quot; title=&quot;나의풀이&quot;&gt;&lt;/a
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="모의고사"><a href="#모의고사" class="headerlink" title="모의고사"></a>모의고사</h1><h3 id="나의풀이"><a href="#나의풀이" class="headerlink" title="나의풀이"></a>나의풀이</h3><p>참고 : <a href="https://eunsamar.tistory.com/89" target="_blank" rel="noopener">김비의 일상블로그</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">public class p03TestExam &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">/* 최초풀이 </span><br><span class="line"> * 1. 입력받은 정답 배열 길이만큼 배열 3개 생성 </span><br><span class="line"> * 2. 1번 수포자 : 1-5 까지 반복문돌리면서 배열 요소 채우기 </span><br><span class="line"> * 3. 2번 수포자 : 2를 넣는 반복문 1개, 다른 숫자를 넣는 반복문 1개 </span><br><span class="line"> * 4. 3번 수포자 : </span><br><span class="line"> * 4. 각 배열과 정답 배열의 요소들을 비교 --&gt; 같은 요소들의 수 각각 구하기 </span><br><span class="line"> * 5. 요소의 수가 가장 큰 수포자를 반환 </span><br><span class="line"> * */</span><br><span class="line"></span><br><span class="line">/* 수정풀이 </span><br><span class="line"> * 1. 학생별로 찍기 패턴을 담은 배열 stu1, 2, 3 선언 </span><br><span class="line"> * 2. 정답 수 체크를 위한 cnt 배열 선언 </span><br><span class="line"> * 3. 정답배열 요소들과 비교/ 정답인 학생이 중복될 수 있으므로 개별 if 문 처리  </span><br><span class="line"> * - 1학생 정답 경우 : </span><br><span class="line"> * - 2학생 정답 경우 : </span><br><span class="line"> * - 3학생 정답 경우 : </span><br><span class="line"> * 4. 정답수 배열에서 제일 큰 점수 찾기 </span><br><span class="line"> * 5. 중복 승자 존재 가능성이 있으므로 정답 list 생성 </span><br><span class="line"> * --&gt; cnt 배열과 == 4번에가 찾은 제일 큰 점수 비교하여 list.add() </span><br><span class="line"> * 6. answer 배열에 결과 넣어서 출력 </span><br><span class="line"> * */</span><br><span class="line">int[] answers = &#123;1,2,3,4,5&#125;;</span><br><span class="line">solution(answers);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static int[] solution(int[] answers) &#123;</span><br><span class="line">        </span><br><span class="line">int[] stu1 = &#123;1, 2, 3, 4, 5&#125;;</span><br><span class="line">int[] stu2 = &#123;2, 1, 2, 3, 2, 4, 2, 5&#125;;</span><br><span class="line">int[] stu3 = &#123;3, 3, 1, 1, 2, 2, 4, 4, 5, 5&#125;;</span><br><span class="line"></span><br><span class="line">//정답 수 체크</span><br><span class="line">int[] cnt = new int[3];</span><br><span class="line"></span><br><span class="line">//정답비교 </span><br><span class="line">for(int i=0; i&lt;answers.length; i++) &#123;</span><br><span class="line">if(answers[i] == stu1[i%stu1.length]) &#123;</span><br><span class="line">cnt[0]++;</span><br><span class="line">&#125;</span><br><span class="line">if(answers[i] == stu2[i%stu2.length]) &#123;</span><br><span class="line">cnt[1]++;</span><br><span class="line">&#125;</span><br><span class="line">if(answers[i] == stu3[i%stu3.length]) &#123;</span><br><span class="line">cnt[2]++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//최고 점수 찾기 </span><br><span class="line">int max = cnt[0];</span><br><span class="line">for(int i=0; i&lt;cnt.length; i++) &#123;</span><br><span class="line">if(max&lt;cnt[i]) &#123;</span><br><span class="line">max = cnt[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//최고점수와 같은 학생 찾기 + 승리자리스트에 넣어주기</span><br><span class="line">List&lt;Integer&gt; winnersList = new ArrayList&lt;Integer&gt;();</span><br><span class="line"></span><br><span class="line">for(int i=0; i&lt;cnt.length; i++) &#123;</span><br><span class="line">if(max == cnt[i]) &#123;</span><br><span class="line">winnersList.add(i+1);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//정답 출력</span><br><span class="line">//반환할 답안 </span><br><span class="line">int[] answer = new int[winnersList.size()];</span><br><span class="line">        </span><br><span class="line">for(int i=0; i&lt;winnersList.size(); i++) &#123;</span><br><span class="line">answer[i] = winnersList.get(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">        return answer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="다른사람들의-풀이"><a href="#다른사람들의-풀이" class="headerlink" title="다른사람들의 풀이"></a>다른사람들의 풀이</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">import java.util.ArrayList;</span><br><span class="line">class Solution &#123;</span><br><span class="line">    public int[] solution(int[] answer) &#123;</span><br><span class="line">        int[] a = &#123;1, 2, 3, 4, 5&#125;;</span><br><span class="line">        int[] b = &#123;2, 1, 2, 3, 2, 4, 2, 5&#125;;</span><br><span class="line">        int[] c = &#123;3, 3, 1, 1, 2, 2, 4, 4, 5, 5&#125;;</span><br><span class="line">        int[] score = new int[3];</span><br><span class="line">        for(int i=0; i&lt;answer.length; i++) &#123;</span><br><span class="line">            if(answer[i] == a[i%a.length]) &#123;score[0]++;&#125;</span><br><span class="line">            if(answer[i] == b[i%b.length]) &#123;score[1]++;&#125;</span><br><span class="line">            if(answer[i] == c[i%c.length]) &#123;score[2]++;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        int maxScore = Math.max(score[0], Math.max(score[1], score[2]));</span><br><span class="line">        ArrayList&lt;Integer&gt; list = new ArrayList&lt;&gt;();</span><br><span class="line">        if(maxScore == score[0]) &#123;list.add(1);&#125;</span><br><span class="line">        if(maxScore == score[1]) &#123;list.add(2);&#125;</span><br><span class="line">        if(maxScore == score[2]) &#123;list.add(3);&#125;</span><br><span class="line">        return list.stream().mapToInt(i-&gt;i.intValue()).toArray();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="배운점"><a href="#배운점" class="headerlink" title="배운점"></a>배운점</h3><ol><li>배열 상에서 최고점을 구할 때, <code>Math.max(비교값1, Math.max(비교값1, 비교값2));</code> 의 방식을 이용</li><li>Arraylist 를 배열로 따로 변환하지 않고, <code>list.stream().mapToInt(i-&gt;i.intValue()).toArray();</code> 를 이용해 바로 배열로 변환 및 출력<br><br><br></li></ol><h1 id="체육복"><a href="#체육복" class="headerlink" title="체육복"></a>체육복</h1><h3 id="풀이"><a href="#풀이" class="headerlink" title="풀이"></a>풀이</h3><ul><li>참고 : <a href="https://blog.naver.com/PostView.nhn?blogId=yongyos&logNo=221486476348" target="_blank" rel="noopener">yongki-rithm님의 블로그</a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">/* 풀이 </span><br><span class="line"> * 1. 우선 체육이 가능한 사람들 answer = 전체 인원 - lost.length </span><br><span class="line"> * - 체육복을 빌리는 사람이 많아질수록 answer 가 추가될 것임. </span><br><span class="line"> * 2. 각 배열을 리스트로 변형 </span><br><span class="line"> * 3. 잃어버린 학생들과 여분이 있는 학생들을 비교하여 같은 학생 번호가 있는지 확인 </span><br><span class="line"> * - 조건 확인 : 여벌 체육복을 가져온 학생이 체육복을 도난당했을 수 있습니다. 이때 이 학생은 체육복을 하나만 도난당했다고 가정하며, 남은 체육복이 하나이기에 다른 학생에게는 체육복을 빌려줄 수 없습니다.</span><br><span class="line"> * 4. 잃어버린 학생과 여분학생-1 or 여분학생+1 비교 : reserve배열에서 삭제처리, answer++ </span><br><span class="line"> * 5. 최종적으로 answer 반환</span><br><span class="line"> * */</span><br><span class="line">int n = 5;</span><br><span class="line">int[] lost = &#123;2, 4&#125;;</span><br><span class="line">int[] reserve = &#123;1, 3, 5&#125;;</span><br><span class="line">solution(n, lost, reserve);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    public static int solution(int n, int[] lost, int[] reserve) &#123;</span><br><span class="line">    //일단 체육할 수 있는 학생수</span><br><span class="line">    int answer = n - lost.length;</span><br><span class="line">    </span><br><span class="line">    List&lt;Integer&gt; lostlist = new ArrayList&lt;Integer&gt;();</span><br><span class="line">    for(int i : lost) &#123; lostlist.add(i); &#125;;</span><br><span class="line">    </span><br><span class="line">    List&lt;Integer&gt; reslist = new ArrayList&lt;Integer&gt;();</span><br><span class="line">    for(int j : reserve) &#123; reslist.add(j); &#125;;</span><br><span class="line">    </span><br><span class="line">    //여분 가져온 학생들 중 체육복 잃어버린 학생들 고려대상에서 지우기 + answer++</span><br><span class="line">    for(int i=0; i&lt;lostlist.size(); i++) &#123;</span><br><span class="line">    for(int j=0; j&lt;reslist.size(); j++) &#123;</span><br><span class="line">    if(lostlist.get(i) == reslist.get(j)) &#123;</span><br><span class="line">    lostlist.remove(i);</span><br><span class="line">    reslist.remove(j);</span><br><span class="line">    i--; //i번째 잃어버린 학생이 사라지고 다시 lostlist 반복문은 정상작동해야하므로 </span><br><span class="line">    answer++;</span><br><span class="line">    break;  //reslist 반복문 종료 </span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    //체육복을 빌릴 수 있는 학생들 조회 시작 </span><br><span class="line">    for(int i=0; i&lt;lostlist.size(); i++) &#123;</span><br><span class="line">    for(int j=0; j&lt;reslist.size(); j++) &#123;</span><br><span class="line">    if((lostlist.get(i) == reslist.get(j)+1) || (lostlist.get(i) == reslist.get(j)-1)) &#123;</span><br><span class="line">    reslist.remove(j);</span><br><span class="line">    answer++;</span><br><span class="line">    break;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return answer;   </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="다른-사람의-풀이"><a href="#다른-사람의-풀이" class="headerlink" title="다른 사람의 풀이"></a>다른 사람의 풀이</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public int solution(int n, int[] lost, int[] reserve) &#123;</span><br><span class="line">        int answer = 0;</span><br><span class="line">        answer = n;</span><br><span class="line"></span><br><span class="line">        for(int i = 0; i &lt; lost.length; i++) &#123;</span><br><span class="line">            boolean rent = false;</span><br><span class="line">            int j = 0;</span><br><span class="line">            while(!rent) &#123;</span><br><span class="line">                if(j == reserve.length)                   break;</span><br><span class="line">                if(lost[i] == reserve[j])                &#123;reserve[j] = -1; rent=true;&#125;</span><br><span class="line">                else if(lost[i] - reserve[j] == 1 )      &#123;reserve[j] = -1; rent=true;&#125;</span><br><span class="line">                else if(lost[i] - reserve[j] == -1)      &#123;reserve[j] = -1; rent=true;&#125;</span><br><span class="line">                else                                     &#123;j++;                      &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            if(!rent) answer--;</span><br><span class="line">        &#125;</span><br><span class="line">        return answer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="배운점-1"><a href="#배운점-1" class="headerlink" title="배운점"></a>배운점</h3><ul><li>반복연산을 최대한 줄이면서 각 상황에 대한 논리 분기처리 </li></ul>]]></content:encoded>
      
      <comments>https://miniminis.github.io/2019/10/17/algorithm-5/#disqus_thread</comments>
    </item>
    
    <item>
      <title>아프리카 여성, 권한 얻기 위한 긴 여정 시작…코딩교육 중요성 커져</title>
      <link>https://miniminis.github.io/2019/10/13/insight-africa-coding-edu-for-girl/</link>
      <guid>https://miniminis.github.io/2019/10/13/insight-africa-coding-edu-for-girl/</guid>
      <pubDate>Sun, 13 Oct 2019 10:01:17 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;아프리카-여성-권한-얻기-위한-긴-여정-시작…코딩교육-중요성-커져&quot;&gt;&lt;a href=&quot;#아프리카-여성-권한-얻기-위한-긴-여정-시작…코딩교육-중요성-커져&quot; class=&quot;headerlink&quot; title=&quot;아프리카 여성, 권한 얻기 위한 긴 
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="아프리카-여성-권한-얻기-위한-긴-여정-시작…코딩교육-중요성-커져"><a href="#아프리카-여성-권한-얻기-위한-긴-여정-시작…코딩교육-중요성-커져" class="headerlink" title="아프리카 여성, 권한 얻기 위한 긴 여정 시작…코딩교육 중요성 커져"></a>아프리카 여성, 권한 얻기 위한 긴 여정 시작…코딩교육 중요성 커져</h2><p><strong>By Travis Williams 기자,  코딩월드뉴스, 2019-07-05 12:11</strong></p><p>[기사 전문]    </p><p>성 격차(gender gap)에도 불구하고 아프리카에서는 여성 권한(empowerment)에 대한 긍정적 조짐이 나타나고 있다.   </p><p>3일(현지시간) 미 워싱턴주 시애틀 현지매체인 보르겐매거진(borgenmagazine)에 따르면 아동 투자 기금 재단(Children’s Investment Fund Foundation, CIFF)과 같은 비정부 단체들은 여학생들의 교육 접근을 촉진하고 여학생들의 등록 비율을 지원하는 데 도움을 주고 있다.    </p><p>매체에 따르면 많은 곳에서 여성과 소녀에 대한 전통적인 기대는 여전히 유지되고 있지만, 아프리카 지도자들은 더 많은 여학생들을 학교에 보내기 위해 노력하고 있다. 일례로 2014년, CIFF는 아프리카의 전통과 종교 지도자들이 여학생들의 교육을 지원하기 위한 해결책을 찾기 위해 소집된 제1회 ‘Keep Girls in School Conference’를 지원했다.    </p><p>또한, 2018년 아프리카연합위원회(African Union Commission, AUC), 유엔 여성 에티오피아와 국제 텔레커뮤니케이션 연합(U.N. Women Ethiopia and the International Telecommunication Union, ITU)은 어린 소녀들에게 디지털 사용능력(digital literacy), 코딩(coding), 개인개발 등을 가르치고 종합적인 정보통신기술을 제공하기 위한 4년제 프로그램인 AGCCI(African Girls Can CODE Initiative)을 도입했다.    </p><p>2018년 8월 에티오피아에서 첫 캠프가 열렸던 이 이니셔티브는 여학생들의 교육 접근성 증대를 통해 힘을 실어주고, 여학생들이 취업할 수 있도록 준비하기를 희망하고 있다. 2018~2022년에 운영될 예정인 AGCCI는 18개 코딩 캠프에 걸쳐 2,000명 이상의 소녀들의 삶에 영향을 미칠 것으로 기대하고 있다.    </p><p>한편 보르겐매거진 “가난을 끝내기 위한 싸움이 계속되면서 아프리카에서 여성의 권위는 점점 더 중요한 문제가 되고 있다. 많은 정부, 외국, 민간 단체들은 그들의 전통적인 역할에서 벗어나는 여성들을 지원하고, 자원에 대한 동등한 접근을 만들고, 인식을 증진시키기 위해 일하고 있다. 사업과 기술 분야에서 여성을 지원하는 유망한 이니셔티브로 아프리카는 여성의 힘을 얻기 위한 긴 여정을 시작하고 있다”고 전했다.</p><h2 id="출처"><a href="#출처" class="headerlink" title="출처"></a>출처</h2><ul><li>코딩월드뉴스, <a href="https://www.codingworldnews.com/article/view/1188" target="_blank" rel="noopener">https://www.codingworldnews.com/article/view/1188</a></li></ul>]]></content:encoded>
      
      <comments>https://miniminis.github.io/2019/10/13/insight-africa-coding-edu-for-girl/#disqus_thread</comments>
    </item>
    
    <item>
      <title>팝업창에서 새창 띄우기</title>
      <link>https://miniminis.github.io/2019/10/13/javascript-popup/</link>
      <guid>https://miniminis.github.io/2019/10/13/javascript-popup/</guid>
      <pubDate>Sun, 13 Oct 2019 09:39:31 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;사촌 오빠는 쇼핑몰을 운영하고 있는 사장님이다. cafe24를 통해서 쇼핑몰을 운영하고 있는데 쇼핑몰 팝업창과 관련해서 나한테 도움을 요청해왔다! &lt;/p&gt;
&lt;h2 id=&quot;요구조건&quot;&gt;&lt;a href=&quot;#요구조건&quot; class=&quot;headerlink&quot; t
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p>사촌 오빠는 쇼핑몰을 운영하고 있는 사장님이다. cafe24를 통해서 쇼핑몰을 운영하고 있는데 쇼핑몰 팝업창과 관련해서 나한테 도움을 요청해왔다! </p><h2 id="요구조건"><a href="#요구조건" class="headerlink" title="요구조건"></a>요구조건</h2><ol><li>홈페이지 접속하자마자 콜라보하고 있는 브랜드에 관한 팝업창이 뜬다. </li><li>해당 팝업창에서 이미지로 된 버튼을 클릭하면 부모창에서 새창으로 페이지 로드</li></ol><h2 id="해결"><a href="#해결" class="headerlink" title="해결"></a>해결</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//html body : 이미지로 된 버튼에 </span><br><span class="line">&lt;a onclick=&quot;link()&quot;&gt;클릭!&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">//script 부분 </span><br><span class="line"> function link() &#123;     </span><br><span class="line">        var openNewWindow = window.open(&quot;about:blank&quot;);</span><br><span class="line">openNewWindow.location.href = &apos;[새창으로 띄우고 싶은 주소]&apos;;</span><br><span class="line">        window.close(); </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://miniminis.github.io/2019/10/13/javascript-popup/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
